//---------------------------------------------------------------------------//
//!
//! \file   tstFreeGasElasticMarginalBetaFunction.cpp
//! \author Eli Moll
//! \brief  Free gas elastic marginal beta function unit tests
//!
//---------------------------------------------------------------------------//

// Std Lib Includes
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <memory>


// FRENSIE Includes
#include <Utility_UnitTestHarnessWithMain.hpp>
#include "DataGen_AdjointFreeGasElasticMarginalBetaFunction.hpp"
#include "MonteCarlo_NuclearScatteringAngularDistribution.hpp"
#include "Utility_UniformDistribution.hpp"
#include "Utility_PhysicalConstants.hpp"

//---------------------------------------------------------------------------//
// Testing Variables
//---------------------------------------------------------------------------//

std::string test_data_path;

std::shared_ptr<DataGen::AdjointFreeGasElasticMarginalBetaFunction> beta_function;

double A = 0.999167;

// Initialize the zero temperature cross section
std::shared_ptr<Utility::UnivariateDistribution> cross_section(
      new Utility::UniformDistribution( 0.0, 20.0, 1.0 ) );

// Initialize the scattering probability distribution
std::shared_ptr<Utility::TabularUnivariateDistribution> isotropic_distribution(
      new Utility::UniformDistribution( -1.0, 1.0, 0.5 ) );

// Initialize the scattering distribution
MonteCarlo::NuclearScatteringAngularDistribution::AngularDistribution
  distribution( 2 );

std::shared_ptr<MonteCarlo::NuclearScatteringAngularDistribution> scattering_distribution;

std::vector<std::string> filenames{"H_293K.c", "H_600K.c", "H_900K.c", "H_1200K.c", "H_2500K.c"};


//---------------------------------------------------------------------------//
// Tests
//---------------------------------------------------------------------------//
// Check that the beta min bound can be returned

/*
FRENSIE_UNIT_TEST( FreeGasElasticMarginalBetaFunction, getBetaMin )
{
  beta_function->setIndependentVariables( 1e-7 );

  TEST_FLOATING_EQUALITY( beta_function->getBetaMin(),
  			 -3.95241294810482,
     		  1e-12 );
}

//---------------------------------------------------------------------------//
// Check that the PDF can be evaluated
FRENSIE_UNIT_TEST( FreeGasElasticMarginalBetaFunction, evaluatePDF )
{
  
  beta_function->setIndependentVariables( 1e-7 );
  double pdf_value = (*beta_function)( beta_function->getBetaMin() );
  
  TEST_EQUALITY_CONST( pdf_value, 0.0 );
  
  pdf_value = (*beta_function)( 0.0 );
  TEST_ASSERT( pdf_value > 0.0 );

  pdf_value = (*beta_function)( -1*(beta_function->getBetaMin()) );
  TEST_ASSERT( pdf_value > 0.0 );

  beta_function->setIndependentVariables( 1e-5 );

  pdf_value = (*beta_function)( beta_function->getBetaMin() );
  TEST_EQUALITY_CONST( pdf_value, 0.0 );
  
  pdf_value = (*beta_function)( 0.0 );
  TEST_ASSERT( pdf_value > 0.0 );

  pdf_value = (*beta_function)( -1*(beta_function->getBetaMin()) );
  TEST_ASSERT( pdf_value > 0.0 );
}
*/ 

/*
//---------------------------------------------------------------------------//
// Check that the PDF can be evaluated
FRENSIE_UNIT_TEST( FreeGasElasticMarginalBetaFunction, outputPDF )
{
  std::vector<std::string> filenames{ "/home/ecmoll/software/frensie/test_data/adjoint_pdf/H_293K.p",
                                      "/home/ecmoll/software/frensie/test_data/adjoint_pdf/H_600K.p",
                                      "/home/ecmoll/software/frensie/test_data/adjoint_pdf/H_900K.p",
                                      "/home/ecmoll/software/frensie/test_data/adjoint_pdf/H_1200K.p",
                                      "/home/ecmoll/software/frensie/test_data/adjoint_pdf/H_2500K.p"};

  std::vector<double> kT_vector{ 2.5301e-8, 5.1705e-8, 7.556e-8, 1.03408e-7, 2.15433e-7};                            
  std::vector<double> energies{1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6};
  std::vector<double> energy_vector{1e-11,1.0241902508787128e-11,1.0489656699950049e-11,1.0743404127153411e-11,1.100328976828065e-11,1.1269462108266578e-11,1.1542073223933693e-11,1.1821278870881124e-11,1.2107238572475014e-11,1.2400115710991613e-11,1.2700077620965566e-11,1.3007295684795903e-11,1.3321945430664714e-11,1.3644206632825014e-11,1.3974263414314105e-11,1.4312304352151582e-11,1.465852258508262e-11,1.5013115923927108e-11,1.5376286964598103e-11,1.5748243203854876e-11,1.6129197157855108e-11,1.6519366483575845e-11,1.691897410317101e-11,1.7328248331337162e-11,1.7747423005760843e-11,1.8176737620720912e-11,1.8616437463922687e-11,1.9066773756642844e-11,1.952800379726377e-11,2.0000391108280038e-11,2.0484205586861707e-11,2.097972365905911e-11,2.1487228437737813e-11,2.2007009884334905e-11,2.253936497452737e-11,2.3084597867908056e-11,2.364302008176695e-11,2.4214950669075437e-11,2.4800716400776026e-11,2.5400651952482602e-11,2.6015100095696127e-11,2.6644411893645843e-11,2.7288946901868895e-11,2.7949073373641088e-11,2.8625168470377016e-11,2.9317618477120857e-11,3.002681902324892e-11,3.0753175308511015e-11,3.149710233454093e-11,3.2259025141966094e-11,3.303937905325296e-11,3.383860992142817e-11,3.465717438481442e-11,3.549554012793038e-11,3.635418614870043e-11,3.7233603032129074e-11,3.8134293230594676e-11,3.9056771350925316e-11,4.000156444841672e-11,4.096921232796492e-11,4.1960267852481814e-11,4.2975297258771334e-11,4.401488048104827e-11,4.507961148228157e-11,4.617009859355286e-11,4.728696486162581e-11,4.843084840492161e-11,4.960240277810557e-11,5.08022973454949e-11,5.20312176634976e-11,5.328986587230252e-11,5.457896109704647e-11,5.5899239858683756e-11,5.7251456494794656e-11,5.863638359057545e-11,6.005481242025215e-11,6.150755339917209e-11,6.299543654683388e-11,6.451931196111609e-11,6.608005030397742e-11,6.76785432989086e-11,6.93157042404153e-11,7.09924685158256e-11,7.270979413972254e-11,7.446866230130229e-11,7.627007792497294e-11,7.811507024451732e-11,8.000469339114047e-11,8.194002699574665e-11,8.392217680578226e-11,8.595227531700217e-11,8.803148242051665e-11,9.01609860654943e-11,9.234200293789073e-11,9.457577915560115e-11,9.686359098042526e-11,9.920674554725477e-11,1.0160658161090348e-10,1.0406447031100007e-10,1.0658181595538352e-10,1.0916005682245304e-10,1.1180066598292317e-10,1.1450515214145725e-10,1.1727506049866428e-10,1.2011197363394368e-10,1.230175124096861e-10,1.2599333689735157e-10,1.2904114732594522e-10,1.3216268505343678e-10,1.3535973356168371e-10,1.3863411947541712e-10,1.419877136058769e-10,1.4542243201969787e-10,1.4894023713364753e-10,1.5254313883584542e-10,1.5623319563411084e-10,1.6001251583208366e-10,1.6388325873379576e-10,1.6784763587738728e-10,1.719079122986608e-10,1.7606640782520116e-10,1.8032549840180726e-10,1.846876174479759e-10,1.8915525724823418e-10,1.937309703760964e-10,1.9841737115247145e-10,2.032171371393444e-10,2.0813301066959979e-10,2.131678004138392e-10,2.1832438298511334e-10,2.236057045824634e-10,2.2901478267422546e-10,2.3455470772204884e-10,2.4022864494662934e-10,2.460398361361415e-10,2.5199160149843217e-10,2.5808734155800893e-10,2.643305390989172e-10,2.7072476115462536e-10,2.772736610460365e-10,2.839809804687993e-10,2.9085055163112236e-10,2.9788629944329246e-10,3.05092243760157e-10,3.124725016778646e-10,3.200312898861525e-10,3.2777292707753654e-10,3.357018364147922e-10,3.4382254805811203e-10,3.5213970175339604e-10,3.6065804948316574e-10,3.6938245818159223e-10,3.783179125152006e-10,3.874695177308542e-10,3.9684250257261904e-10,4.064422222691869e-10,4.162741615935818e-10,4.2634393799685634e-10,4.3665730481761863e-10,4.472201545691794e-10,4.580385223062264e-10,4.691185890729289e-10,4.804666854344728e-10,4.920892950939962e-10,5.03993058597049e-10,5.161847771256413e-10,5.286714163840852e-10,5.414601105788207e-10,5.545581664945401e-10,5.679730676688821e-10,5.817124786681444e-10,5.957842494664071e-10,6.101964199305851e-10,6.249572244139983e-10,6.400750964610395e-10,6.555586736256484e-10,6.71416802406369e-10,6.87658543300765e-10,7.042931759821006e-10,7.21330204601273e-10,7.387793632169741e-10,7.566506213572083e-10,7.749541897153731e-10,7.937005259841008e-10,8.129003408302225e-10,8.325646040142966e-10,8.527045506581421e-10,8.733316876639826e-10,8.944578002889039e-10,9.160949588783179e-10,9.382555257623084e-10,9.609521623188412e-10,9.841978362077755e-10,1.0080058287799278e-09,1.0323897426653191e-09,1.0573635095450071e-09,1.0829413981108971e-09,1.1091380222181481e-09,1.1359683492347244e-09,1.1634477085929896e-09,1.1915918005481176e-09,1.2204167051483986e-09,1.2499388914225103e-09,1.2801752267890861e-09,1.3111429866938273e-09,1.3428598644798157e-09,1.3753439814965367e-09,1.4086138974534713e-09,1.4426886210241122e-09,1.4775876207065556e-09,1.5133308359467275e-09,1.549938688530771e-09,1.5874320942529598e-09,1.6258324748658593e-09,1.6651617703196229e-09,1.7054424512973031e-09,1.7466975320533918e-09,1.7889505835629918e-09,1.8322257469890076e-09,1.8765477474751087e-09,1.9219419082724227e-09,1.9684341652078447e-09,2.0160510815024517e-09,2.0648198629482964e-09,2.1147683734523736e-09,2.165925150956554e-09,2.2183194237427157e-09,2.2719811271321736e-09,2.3269409205892014e-09,2.3832302052381972e-09,2.440881141804645e-09,2.4999266689900186e-09,2.5604005222912822e-09,2.6223372532754957e-09,2.685772249320824e-09,2.75074175383498e-09,2.8172828869628098e-09,2.8854336667947442e-09,2.9552330310884055e-09,3.0267208595154928e-09,3.0999379964470055e-09,3.1749262742895126e-09,3.2517285373860063e-09,3.3303886664948434e-09,3.4109516038609894e-09,3.4934633788935345e-09,3.5779711344645647e-09,3.66452315384407e-09,3.753168888286409e-09,3.843958985284237e-09,3.936945317505761e-09,4.032181012431999e-09,4.129720482711111e-09,4.229619457246869e-09,4.331935013039156e-09,4.436725607794871e-09,4.544051113327439e-09,4.6539728497645235e-09,4.766553620583045e-09,4.881857748491805e-09,4.99995111218201e-09,5.120901183967013e-09,5.244777068332272e-09,5.371649541418149e-09,5.5015910914575765e-09,5.6346759601920494e-09,5.770980185289347e-09,5.9105816437876e-09,6.0535600965899375e-09,6.199997234035813e-09,6.349976722574464e-09,6.5035842525675534e-09,6.660907587248008e-09,6.8220366128634864e-09,6.9870633900324185e-09,7.1560822063427716e-09,7.329189630222896e-09,7.506484566115678e-09,7.688068310987201e-09,7.874044612202697e-09,8.064519726802055e-09,8.259602482209726e-09,8.459404338412853e-09,8.664039451643531e-09,8.873624739601853e-09,9.08827994825641e-09,9.308127720260708e-09,9.533293665024915e-09,9.76390643048235e-09,1.0000097776591996e-08,1.0242002650619434e-08,1.048975926423838e-08,1.0743509172497609e-08,1.10033973546981e-08,1.1269572297226436e-08,1.1542186078392135e-08,1.182139445531725e-08,1.2107356952927623e-08,1.240023695509707e-08,1.270020179799638e-08,1.3007422865700217e-08,1.332207568810701e-08,1.3644340041227547e-08,1.3974400049899336e-08,1.4312444292985898e-08,1.4658665911120856e-08,1.5013262717058135e-08,1.5376437308691796e-08,1.574839718480988e-08,1.612935486364808e-08,1.6519528004311514e-08,1.6919139531133765e-08,1.7328417761043872e-08,1.7747596534014666e-08,1.8176915346666727e-08,1.8616619489103722e-08,1.906696018505867e-08,1.952819473542975e-08,2.0000586665288154e-08,2.048440587444291e-08,2.0979928791647147e-08,2.1487438532534623e-08,2.2007225061377555e-08,2.2539585356756664e-08,2.3084823581238767e-08,2.3643251255159807e-08,2.4215187434610612e-08,2.4800958893728896e-08,2.5400900311400895e-08,2.6015354462478906e-08,2.664467241362491e-08,2.728921372389167e-08,2.794934665015548e-08,2.862544835751885e-08,2.931790513480293e-08,3.002711261525217e-08,3.0753476002578484e-08,3.149741030247339e-08,3.225934055972005e-08,3.303970210104151e-08,3.3838940783823706e-08,3.465751325085438e-08,3.549588719122486e-08,3.635454160754314e-08,3.723396708961029e-08,3.81346660947177e-08,3.905715323472494e-08,4.000195557008135e-08,4.096961291096074e-08,4.19606781256808e-08,4.297571745658193e-08,4.4015310843549326e-08,4.50800522553595e-08,4.617055002904212e-08,4.728742721745281e-08,4.843132194525206e-08,4.960288777349542e-08,5.08027940730449e-08,5.203172640701166e-08,5.329038692244981e-08,5.4579494751527654e-08,5.589978642240061e-08,5.7252016280024944e-08,5.863695691715101e-08,6.005539961574129e-08,6.150815479906743e-08,6.299605249474369e-08,6.451994280896023e-08,6.608069641218919e-08,6.767920503664023e-08,6.931638198574854e-08,7.099316265598849e-08,7.271050507131026e-08,7.446939043050332e-08,7.627082366780201e-08,7.811583402705237e-08,8.000547564976682e-08,8.194082817740542e-08,8.392299736822652e-08,8.595311572905765e-08,8.803234316235058e-08,9.016186762888896e-08,9.234290582652527e-08,9.457670388533826e-08,9.686453807960652e-08,9.920771555700303e-08,1.0160757508543112e-07,1.0406548781792534e-07,1.065828580760568e-07,1.0916112415228708e-07,1.1180175913173321e-07,1.1450627173381149e-07,1.1727620717423868e-07,1.2011314804788742e-07,1.2301871523299803e-07,1.2599456881726144e-07,1.2904240904630623e-07,1.3216397729513012e-07,1.3536105706302808e-07,1.386354749925908e-07,1.4198910191335106e-07,1.4542385391067844e-07,1.4894169342052733e-07,1.525446303506702e-07,1.5623472322905375e-07,1.6001408037993111e-07,1.6388486112844817e-07,1.678492770343687e-07,1.7190959315564097e-07,1.7606812934253338e-07,1.8032726156307525e-07,1.846894232605577e-07,1.8915710674387536e-07,1.9373286461150155e-07,1.9841931120990587e-07,2.0321912412725528e-07,2.0813504572324587e-07,2.1316988469594397e-07,2.1832651768652557e-07,2.2360789092283834e-07,2.2901702190272212e-07,2.345570011180451e-07,2.402309938204491e-07,2.4604224182980877e-07,2.519940653864333e-07,2.5808986504807785e-07,2.643331236328445e-07,2.707274082090774e-07,2.7727637213339866e-07,2.8398375713804546e-07,2.908533954686948e-07,2.97889212074008e-07,3.0509522684814096e-07,3.124755569274959e-07,3.200344190430382e-07,3.2777613192951234e-07,3.35705118792942e-07,3.4382590983781205e-07,3.521431448553904e-07,3.6066157587466194e-07,3.6938606987738265e-07,3.7832161157881825e-07,3.874733062757496e-07,3.968463827633651e-07,4.0644619632272057e-07,4.162782317804666e-07,4.263481066425839e-07,4.3666157430393214e-07,4.472245273354389e-07,4.580430008507978e-07,4.691231759546171e-07,4.804713832739787e-07,4.920941065754195e-07,5.039979864694159e-07,5.161898242044771e-07,5.286765855530231e-07,5.414654047912532e-07,5.545635887752973e-07,5.679786211159722e-07,5.817181664545142e-07,5.957900748417537e-07,6.10202386223224e-07,6.249633350327542e-07,6.400813548971935e-07,6.555650834549444e-07,6.714233672910452e-07,6.876652669916456e-07,7.04300062320752e-07,7.213372575221855e-07,7.387865867498113e-07,7.566580196291171e-07,7.74961766953337e-07,7.937082865173504e-07,8.129082890927183e-07,8.32572744547258e-07,8.527128881126364e-07,8.733402268035928e-07,8.944665459924455e-07,9.161039161426203e-07,9.382646997050815e-07,9.609615581815896e-07,9.842074593588028e-07,1.0080156847173927e-06,1.032399837020386e-06,1.0573738480850536e-06,1.082951986742821e-06,1.1091488669917323e-06,1.1359794563461047e-06,1.163459084388183e-06,1.1916034515266509e-06,1.220428637967023e-06,1.2499511128990135e-06,1.280187743906167e-06,1.3111558066031131e-06,1.3428729945059262e-06,1.3753574291412726e-06,1.4086276704001044e-06,1.4427027271417825e-06,1.4776020680547454e-06,1.5133456327798977e-06,1.5499538433030508e-06,1.5874476156229767e-06,1.6258483717017143e-06,1.6651780517039287e-06,1.7054591265323765e-06,1.7467146106665849e-06,1.7889680753121264e-06,1.8322436618679385e-06,1.876566095719455e-06,1.921960700365399e-06,1.9684534118862687e-06,2.0160707937628555e-06,2.064840052053229e-06,2.1147890509368154e-06,2.1659463286345317e-06,2.2183411137140322e-06,2.2720033417893426e-06,2.3269636726245007e-06,2.383253507650943e-06,2.4409050079085964e-06,2.4999511124210117e-06,2.5604255570149983e-06,2.6223628935954642e-06,2.6857985098865714e-06,2.7507686496504003e-06,2.817310433394747e-06,2.885461879581787e-06,2.9552619263498327e-06,3.0267504537605493e-06,3.0999683065842808e-06,3.174957317636613e-06,3.2517603316794544e-06,3.3304212299002335e-06,3.410984954983311e-06,3.493497536787879e-06,3.5780061186469505e-06,3.6645589843025897e-06,3.753205585492718e-06,3.84399657020518e-06,3.936983811615363e-06,4.03222043772377e-06,4.1297608617105895e-06,4.229660813024466e-06,4.331977369223388e-06,4.436768988585817e-06,4.54409554351061e-06,4.654018354724972e-06,4.766600226319913e-06,4.8819054816331305e-06,4.9999999999999996e-06};
  std::vector<double> energy_array( energy_vector );

  for( int e = 0; e < filenames.size(); ++e )
  {
    double kT = kT_vector[e];

    std::map< double, std::vector<double> > data_map;

    for( int i = 0; i < energies.size(); ++i )
    {
      // Initialize the gkq_set factor
      beta_function.reset( new DataGen::AdjointFreeGasElasticMarginalBetaFunction(
                    cross_section, 
                    scattering_distribution,
                    A,
                    kT,
                    energies[i] ) ); 

      beta_function->populatePDF( energy_array );

      std::vector<double> pdf_array;
      beta_function->getPDF( pdf_array );

      data_map[ i ] = pdf_array;
    }

    std::ofstream output_file;
    output_file.open( filenames[e] );

    for( int i = 0; i < energy_vector.size(); ++i )
    {
      output_file << energy_vector[i] << " ";
      for( int j = 0; j < energies.size(); ++j )
      {
        output_file << data_map[ j ][i] << " ";
      }
      output_file << "\n";
    }

    output_file.close();
  }
}
*/

//---------------------------------------------------------------------------//
// Check that the PDF can be evaluated
FRENSIE_UNIT_TEST( FreeGasElasticMarginalBetaFunction, outputCDF )
{

  std::vector<double> kT_vector{ 2.5301e-8, 5.1705e-8, 7.556e-8, 1.03408e-7, 2.15433e-7};                            
  std::vector<double> energies{1e-11,2e-11,5e-11,1e-10,2e-10,5e-10,1e-9,2e-9,5e-9,1e-8,2e-8,5e-8,1e-7,2e-7,5e-7,1e-6,1.5e-6,2e-6,2.5e-6,3e-6,3.5e-6,4e-6,4.1e-6,4.2e-6,4.3e-6,4.4e-6,4.5e-6,4.6e-6,4.7e-6,4.8e-6,4.9e-6}; // 1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6,
  std::vector<double> energy_vector{1e-11,2e-11,5e-11,1e-10,2e-10,5e-10,1e-9,2e-9,5e-9,1e-8,2e-8,5e-8,1e-7,2e-7,5e-7,1e-6,1.5e-6,2e-6,2.5e-6,3e-6,3.5e-6,4e-6,4.1e-6,4.2e-6,4.3e-6,4.4e-6,4.5e-6,4.6e-6,4.7e-6,4.8e-6,4.9e-6};
  std::vector<double> energy_array( energy_vector );

  for( int e = 0; e < filenames.size(); ++e )
  {
    std::string filename = test_data_path + "/adjoint_cdf/" + filenames[e];

    double kT = kT_vector[e];

    std::map< double, std::vector<double> > data_map;

    for( int i = 0; i < energies.size(); ++i )
    {
      // Initialize the gkq_set factor
      beta_function.reset( new DataGen::AdjointFreeGasElasticMarginalBetaFunction(
                    cross_section, 
                    scattering_distribution,
                    A,
                    kT,
                    energies[i] ) ); 

      beta_function->populateCDF( energy_array );

      std::vector<double> cdf_array;
      beta_function->getCDF( cdf_array );

      data_map[ i ] = cdf_array;
    }

    std::ofstream output_file;
    output_file.open( filename );

    for( int i = 0; i < energy_vector.size(); ++i )
    {
      output_file << energy_vector[i] << " ";
      for( int j = 0; j < energies.size(); ++j )
      {
        output_file << data_map[ j ][i] << " ";
      }
      output_file << "\n";
    }

    output_file.close();
  }
}

//---------------------------------------------------------------------------//
// Custom setup
//---------------------------------------------------------------------------//
FRENSIE_CUSTOM_UNIT_TEST_SETUP_BEGIN();

FRENSIE_CUSTOM_UNIT_TEST_COMMAND_LINE_OPTIONS()
{
  ADD_STANDARD_OPTION_AND_ASSIGN_VALUE( "test_data_path",
                                       test_data_path, "",
                                       "Path to the data test folder" );

}

FRENSIE_CUSTOM_UNIT_TEST_INIT()
{
 
  distribution[0].first = 0.0;
  distribution[0].second = isotropic_distribution;

  distribution[1].first = 20.0;
  distribution[1].second = isotropic_distribution;

  scattering_distribution.reset( 
        new MonteCarlo::NuclearScatteringAngularDistribution(
                    distribution ) );

  // Initialize the gkq_set factor
  beta_function.reset( new DataGen::AdjointFreeGasElasticMarginalBetaFunction(
						    cross_section, 
						    scattering_distribution,
						    0.999167,
						    2.53010e-8,
						    2.53010e-8 ) );
}
FRENSIE_CUSTOM_UNIT_TEST_SETUP_END();

//---------------------------------------------------------------------------//
// end tstFreeGasElasticMarginalBetaFunction.cpp
//---------------------------------------------------------------------------//
