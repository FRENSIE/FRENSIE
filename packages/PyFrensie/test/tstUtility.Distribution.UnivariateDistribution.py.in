#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.Distribution.UnivariateDistribution class unit tests
#  \file   tstUtility.Distribution.UnivariateDistribution.py
#  \author Alex Robinson
#  \brief  Unit tests for the Utility.Distribution.UnivariateDistribution classes
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy
# from PyTrilinos.Teuchos import ParameterList

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')
Distribution = importPyFrensieModuleFromBuildDir('Utility.Distribution')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Delta Distribution
class DeltaDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.DeltaDistribution class"

    def setUp(self):
        self.dist = Distribution.DeltaDistribution( 0.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.DeltaDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.DeltaDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.DeltaDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.DeltaDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.DeltaDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0 )

    def testSample(self):
        "*Test Utility.Distribution.DeltaDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample == 0.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.DeltaDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample == 0.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.DeltaDistribution sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample == 0.0)
        self.assertTrue(bin_index == 0)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.DeltaDistribution sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.5 )
        self.assertTrue(sample == 0.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.DeltaDistribution sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 1.0 )
        self.assertTrue(sample == 0.0 )

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.DeltaDistribution sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 1.0 )
        self.assertTrue(sample == 0.0)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.DeltaDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 0.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.DeltaDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.DeltaDistribution isContinuous method"
        self.assertTrue(not self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.DeltaDistribution isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.DeltaDistribution ==,!= methods"
        diff_dist = Distribution.DeltaDistribution( 1.0 )
        same_dist = Distribution.DeltaDistribution( 0.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Discrete Distribution
class DiscreteDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.DiscreteDistribution class"

    def setUp(self):
        self.dist = Distribution.DiscreteDistribution( [0.0,1.0], [1.0,3.0] )
        self.cdf_dist = Distribution.DiscreteDistribution( [0.0,1.0], [0.25,1.0], True )

    def testConstructor(self):
        "*Test Utility.Distribution.DiscreteDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.DiscreteDistribution))
        self.assertTrue(isinstance(self.cdf_dist, Distribution.DiscreteDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.DiscreteDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 0.5 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 0.0)

        self.assertTrue(self.cdf_dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 0.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 0.5 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 1.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 2.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.DiscreteDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.5 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.0)

        self.assertTrue(self.cdf_dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 0.5 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 1.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 2.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.DiscreteDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.25)
        self.assertTrue(self.dist.evaluateCDF( 0.5 ) == 0.25)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 1.0)

        self.assertTrue(self.cdf_dist.evaluateCDF( -1.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluateCDF( 0.0 ) == 0.25)
        self.assertTrue(self.cdf_dist.evaluateCDF( 0.5 ) == 0.25)
        self.assertTrue(self.cdf_dist.evaluateCDF( 1.0 ) == 1.0)
        self.assertTrue(self.cdf_dist.evaluateCDF( 2.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.DiscreteDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample == 0.0 or sample == 1.0)

        sample = self.cdf_dist.sample()
        self.assertTrue(sample == 0.0 or sample == 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.DiscreteDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample == 0.0 or sample == 1.0)
        self.assertTrue(trials == 1)

        trials = 0
        sample,trials = self.cdf_dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample == 0.0 or sample == 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.DiscreteDistribution sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample == 0.0 or sample == 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

        sample,bin_index = self.cdf_dist.sampleAndRecordBinIndex()
        self.assertTrue(sample == 0.0 or sample == 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.DiscreteDistribution sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.2 )
        self.assertTrue(sample == 0.0)

        sample = self.cdf_dist.sampleWithRandomNumber( 0.2 )
        self.assertTrue(sample == 0.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.DiscreteDistribution sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample == 0.0)

        sample = self.cdf_dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample == 0.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.DiscreteDistribution sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 0.5 )
        self.assertTrue(sample == 0.0)

        sample = self.cdf_dist.sampleWithRandomNumberInSubrange( 0.5, 0.5 )
        self.assertTrue(sample == 0.0)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.DiscreteDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

        upper_bound = self.cdf_dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.DiscreteDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.DiscreteDistribution isContinuous method"
        self.assertFalse(self.dist.isContinuous())
        self.assertFalse(self.cdf_dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.DiscreteDistribution isTabular method"
        self.assertTrue(self.dist.isTabular())
        self.assertTrue(self.cdf_dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.DiscreteDistribution ==,!= methods"
        diff_dist = Distribution.DiscreteDistribution( [0.0], [1.0] )
        same_dist = Distribution.DiscreteDistribution( [0.0,1.0], [1.0,3.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Equiprobable Bin Distribution
class EquiprobableBinDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.EquiprobableBinDistribution class"

    def setUp(self):
        self.dist = Distribution.EquiprobableBinDistribution( [0.0,1.0,2.0] )

    def testConstructor(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.EquiprobableBinDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 3.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 3.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 3.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0 and sample <= 2.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0 and sample <= 2.0)
        self.assertTrue(trials == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.5 )
        self.assertTrue(sample >= 0.0 and sample <= 1.0)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 0.0 and sample <= 2.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 1.0 )
        self.assertTrue(sample >= 0.0 and sample <= 1.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 1.0 )
        self.assertTrue(sample >= 0.0 and sample <= 0.5)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 2.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testEquality(self):
        "*Test Utility.Distribution.EquiprobableBinDistribution ==,!= methods"
        diff_dist = Distribution.EquiprobableBinDistribution( [0.0,1.0] )
        same_dist = Distribution.EquiprobableBinDistribution( [0.0,1.0,2.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Evaporation Distribution
class EvaporationDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.EvaporationDistribution class"

    def setUp(self):
        self.dist = Distribution.EvaporationDistribution( 1.0, 1.0, 0.1 )

    def testConstructor(self):
        "*Test Utility.Distribution.EvaporationDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.EvaporationDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.EvaporationDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.9 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.EvaporationDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.9 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.EvaporationDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.EvaporationDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0)
        self.assertTrue(trials >= 1)

    def testIsContinuous(self):
        "*Test Utility.Distribution.EvaporationDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.EvaporationDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.EvaporationDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 0.9)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.EvaporationDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testEquality(self):
        "*Test Utility.Distribution.EvaporationDistribution ==,!= methods"
        diff_dist = Distribution.EvaporationDistribution( 1.0, 1.0, 0.5 )
        same_dist = Distribution.EvaporationDistribution( 1.0, 1.0, 0.1 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Exponential Distribution
class ExponentialDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.ExponentialDistribution class"

    def setUp(self):
        self.dist = Distribution.ExponentialDistribution( 1.0, 1.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.ExponentialDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.ExponentialDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.ExponentialDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) != 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.ExponentialDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) != 0.0)

    def testSample(self):
        "*Test Utility.Distribution.ExponentialDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.ExponentialDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0)
        self.assertTrue(trials == 1)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.ExponentialDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == float('Inf'))

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.ExponentialDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.ExponentialDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.ExponentialDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.ExponentialDistribution ==,!= methods"
        diff_dist = Distribution.ExponentialDistribution( 2.0, 3.0 )
        same_dist = Distribution.ExponentialDistribution( 1.0, 1.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Histogram Distribution
class HistogramDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.HistogramDistribution class"

    def setUp(self):
        self.dist = Distribution.HistogramDistribution( [-1.0, 0.0, 1.0], [1.0, 1.0] )
        self.cdf_dist = Distribution.HistogramDistribution( [-1.0, 0.0, 1.0], [0.5, 1.0], True )

    def testConstructor(self):
        "*Test Utility.Distribution.HistogramDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.HistogramDistribution))
        self.assertTrue(isinstance(self.cdf_dist, Distribution.HistogramDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.HistogramDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -2.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 0.0)

        self.assertTrue(self.cdf_dist.evaluate( -2.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 0.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluate( 2.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.HistogramDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -2.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.0)

        self.assertTrue(self.cdf_dist.evaluatePDF( -2.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.cdf_dist.evaluatePDF( 2.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.HistogramDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( -2.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 1.0)

        self.assertTrue(self.cdf_dist.evaluateCDF( -2.0 ) == 0.0)
        self.assertTrue(self.cdf_dist.evaluateCDF( 0.0 ) == 0.5)
        self.assertTrue(self.cdf_dist.evaluateCDF( 2.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.HistogramDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)

        sample = self.cdf_dist.sample()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.HistogramDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= -1.0 and sample <= 1.0)
        self.assertTrue(trials == 1)

        trials = 0
        sample,trials = self.cdf_dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= -1.0 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.HistogramDistribution sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

        sample,bin_index = self.cdf_dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.HistogramDistribution sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.5 )
        self.assertTrue(sample == 0.0)

        sample = self.cdf_dist.sampleWithRandomNumber( 0.5 )
        self.assertTrue(sample == 0.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.HistogramDistribution sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.0 )
        self.assertTrue(sample >= -1.0 and sample <= 0.0)

        sample = self.cdf_dist.sampleInSubrange( 0.0 )
        self.assertTrue(sample >= -1.0 and sample <= 0.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.HistogramDistribution sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 0.0 )
        self.assertTrue(sample == -0.5)

        sample = self.cdf_dist.sampleWithRandomNumberInSubrange( 0.5, 0.0 )
        self.assertTrue(sample == -0.5)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.HistogramDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.HistogramDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == -1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.HistogramDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.HistogramDistribution isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.HistogramDistribution ==,!= methods"
        diff_dist = Distribution.HistogramDistribution( [0.0, 1.0], [1.0] )
        same_dist = Distribution.HistogramDistribution( [-1.0, 0.0, 1.0], [1.0, 1.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the MaxwellFission Distribution
class MaxwellFissionDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.MaxwellFissionDistribution class"

    def setUp(self):
        self.dist = Distribution.MaxwellFissionDistribution( 1.0, 1.0, 0.1 )

    def testConstructor(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.MaxwellFissionDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.9 ) != 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.9 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample > 0.0 and sample <= 0.9)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample > 0.0 and sample <= 0.9)
        self.assertTrue(trials > 0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 0.9)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testEquality(self):
        "*Test Utility.Distribution.MaxwellFissionDistribution ==,!= methods"
        diff_dist = Distribution.MaxwellFissionDistribution( 1.0, 1.0, 0.5 )
        same_dist = Distribution.MaxwellFissionDistribution( 1.0, 1.0, 0.1 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Normal Distribution
class NormalDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.NormalDistribution class"

    def setUp(self):
        self.dist = Distribution.NormalDistribution( 0.0, 0.1 )

    def testConstructor(self):
        "*Test Utility.Distribution.NormalDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.NormalDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.NormalDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) != 0.0 )
        self.assertTrue(self.dist.evaluate( 0.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluate( -1.0 ) != 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.NormalDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) != 0.0 )
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0 )
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) != 0.0)

    def testSample(self):
        "*Test Utility.Distribution.NormalDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample == sample)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.NormalDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample == sample)
        self.assertTrue(trials != 0)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.NormalDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == float('Inf'))

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.NormalDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == -float('Inf'))

    def testIsContinuous(self):
        "*Test Utility.Distribution.NormalDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.NormalDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.NormalDistribution ==,!= methods"
        diff_dist = Distribution.NormalDistribution( 1.0, 0.5 )
        same_dist = Distribution.NormalDistribution( 0.0, 0.1 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Polynomial Distribution
class PolynomialDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.PolynomialDistribution class"

    def setUp(self):
        self.dist = Distribution.PolynomialDistribution( [1.0, 2.0], 0.0, 1.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.PolynomialDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.PolynomialDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.PolynomialDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 3.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.PolynomialDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.PolynomialDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.PolynomialDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.PolynomialDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.PolynomialDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.PolynomialDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.PolynomialDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.PolynomialDistribution ==,!= methods"
        diff_dist = Distribution.PolynomialDistribution( [1.0, 2.0, 3.0], 0.0, 1.0 )
        same_dist = Distribution.PolynomialDistribution( [1.0, 2.0], 0.0, 1.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Power Distribution 1
class PowerDistribution_1TestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.PowerDistribution_1 class"

    def setUp(self):
        self.dist = Distribution.PowerDistribution_1( 0.0, 1.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.PowerDistribution_1 constructor"
        self.assertTrue(isinstance(self.dist, Distribution.PowerDistribution_1))
    def testEvaluate(self):
        "*Test Utility.Distribution.PowerDistribution_1 evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.PowerDistribution_1 evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.PowerDistribution_1 sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.PowerDistribution_1 sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.PowerDistribution_1 getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.PowerDistribution_1 getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.PowerDistribution_1 isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.PowerDistribution_1 isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.PowerDistribution_1 ==,!= methods"
        diff_dist = Distribution.PowerDistribution_1( 1.0, 2.0 )
        same_dist = Distribution.PowerDistribution_1( 0.0, 1.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Power Distribution 2
class PowerDistribution_2TestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.PowerDistribution_2 class"

    def setUp(self):
        self.dist = Distribution.PowerDistribution_2( 0.0, 1.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.PowerDistribution_2 constructor"
        self.assertTrue(isinstance(self.dist, Distribution.PowerDistribution_2))
    def testEvaluate(self):
        "*Test Utility.Distribution.PowerDistribution_2 evaluate method"
        self.assertTrue(self.dist.evaluate( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.PowerDistribution_2 evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( -1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) != 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.PowerDistribution_2 sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.PowerDistribution_2 sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.PowerDistribution_2 getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.PowerDistribution_2 getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.PowerDistribution_2 isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.PowerDistribution_2 isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.PowerDistribution_2 ==,!= methods"
        diff_dist = Distribution.PowerDistribution_2( 1.0, 2.0 )
        same_dist = Distribution.PowerDistribution_2( 0.0, 1.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular Distribution LinLin
class TabularDistribution_LinLinTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularDistribution_LinLin class"

    def setUp(self):
        self.dist = Distribution.TabularDistribution_LinLin( [1.0, 2.0, 3.0], [0.0, 1.0, 2.0] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularDistribution_LinLin))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 3.0 ) == 2.0)
        self.assertTrue(self.dist.evaluate( 4.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluatePDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluatePDF( 4.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 0.25)
        self.assertTrue(self.dist.evaluateCDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 4.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.25 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleWithRandomNumber( 1.0 )
        self.assertTrue(sample == 3.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 2.0 )
        self.assertTrue(sample >= 1.0 and sample <= 2.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.25, 2.0 )
        self.assertTrue(sample == 1.5)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 3.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularDistribution_LinLin ==,!= methods"
        diff_dist = Distribution.TabularDistribution_LinLin( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularDistribution_LinLin( [1.0,2.0,3.0], [0.0,1.0,2.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular Distribution LinLog
class TabularDistribution_LinLogTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularDistribution_LinLog class"

    def setUp(self):
        self.dist = Distribution.TabularDistribution_LinLog( [1.0, 2.0, 3.0], [0.0, 1.0, 2.0] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularDistribution_LinLog))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 3.0 ) == 2.0)
        self.assertTrue(self.dist.evaluate( 4.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluatePDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluatePDF( 4.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 0.25)
        self.assertTrue(self.dist.evaluateCDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 4.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.25 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleWithRandomNumber( 1.0 )
        self.assertTrue(sample == 3.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 2.0 )
        self.assertTrue(sample >= 1.0 and sample <= 2.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.25, 2.0 )
        self.assertTrue(sample == 1.5)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 3.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularDistribution_LinLog ==,!= methods"
        diff_dist = Distribution.TabularDistribution_LinLog( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularDistribution_LinLog( [1.0,2.0,3.0], [0.0,1.0,2.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular Distribution LogLin
class TabularDistribution_LogLinTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularDistribution_LogLin class"

    def setUp(self):
        self.dist = Distribution.TabularDistribution_LogLin( [1.0, 2.0, 3.0], [1.0, 2.0, 3.0] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularDistribution_LogLin))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 2.0)
        self.assertTrue(self.dist.evaluate( 3.0 ) == 3.0)
        self.assertTrue(self.dist.evaluate( 4.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.25)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluatePDF( 3.0 ) == 0.75)
        self.assertTrue(self.dist.evaluatePDF( 4.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 0.375)
        self.assertTrue(self.dist.evaluateCDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 4.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.375 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleWithRandomNumber( 1.0 )
        self.assertTrue(sample == 3.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 2.0 )
        self.assertTrue(sample >= 1.0 and sample <= 2.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 2.0 )
        self.assertAlmostEqual(sample, 1.58113883008, delta=1e-6)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 3.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularDistribution_LogLin ==,!= methods"
        diff_dist = Distribution.TabularDistribution_LogLin( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularDistribution_LogLin( [1.0,2.0,3.0], [1.0,2.0,3.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular Distribution LogLog
class TabularDistribution_LogLogTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularDistribution_LogLog class"

    def setUp(self):
        self.dist = Distribution.TabularDistribution_LogLog( [1.0, 2.0, 3.0], [1.0, 2.0, 3.0] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularDistribution_LogLog))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 1.0)
        self.assertTrue(self.dist.evaluate( 2.0 ) == 2.0)
        self.assertTrue(self.dist.evaluate( 3.0 ) == 3.0)
        self.assertTrue(self.dist.evaluate( 4.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.25)
        self.assertTrue(self.dist.evaluatePDF( 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluatePDF( 3.0 ) == 0.75)
        self.assertTrue(self.dist.evaluatePDF( 4.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 2.0 ) == 0.375)
        self.assertTrue(self.dist.evaluateCDF( 3.0 ) == 1.0)
        self.assertTrue(self.dist.evaluateCDF( 4.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1.0 and sample <= 3.0)
        self.assertTrue(bin_index == 0 or bin_index == 1)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.375 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleWithRandomNumber( 1.0 )
        self.assertTrue(sample == 3.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 2.0 )
        self.assertTrue(sample >= 1.0 and sample <= 2.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 2.0 )
        self.assertAlmostEqual(sample, 1.58113883008, delta=1e-6)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 3.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularDistribution_LogLog ==,!= methods"
        diff_dist = Distribution.TabularDistribution_LogLog( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularDistribution_LogLog( [1.0,2.0,3.0], [1.0,2.0,3.0] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular CDF Distribution LinLin
class TabularCDFDistribution_LinLinTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularCDFDistribution_LinLin class"

    def setUp(self):
        self.dist = Distribution.TabularCDFDistribution_LinLin( [1e-3, 1e-2, 1e-1, 1.0], [0.0, 1e-1, 1.0, 1e2] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularCDFDistribution_LinLin))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-2 ) == 9.8901207583744611e-06)
        self.assertTrue(self.dist.evaluateCDF( 1e-1 ) == 1.0978034041795651e-03)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1 or bin_index == 2)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.0 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumber( 1.0 - 1e-15 )
        self.assertAlmostEqual( sample, 1.0, delta=1e-15 )

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample >= 1e-3 and sample <= 0.5)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.0, 0.5 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumberInSubrange( 1.0 - 1e-15, 0.5 )
        self.assertAlmostEqual( sample, 0.5, delta=1e-15 )

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1e-3)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLin ==,!= methods"
        diff_dist = Distribution.TabularCDFDistribution_LinLin( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularCDFDistribution_LinLin( [1e-3,1e-2,1e-1,1.0], [0.0,1e-1,1.0,1e2] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular CDF Distribution LinLog
class TabularCDFDistribution_LinLogTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularCDFDistribution_LinLog class"

    def setUp(self):
        self.dist = Distribution.TabularCDFDistribution_LinLog( [1e-3, 1e-2, 1e-1, 1.0], [0.0, 1e-1, 1.0, 1e2] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularCDFDistribution_LinLog))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-2 ) == 9.8901207583744611e-06)
        self.assertTrue(self.dist.evaluateCDF( 1e-1 ) == 1.0978034041795651e-03)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1 or bin_index == 2)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.0 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumber( 1.0 - 1e-15 )
        self.assertAlmostEqual( sample, 1.0, delta=1e-12 )

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample >= 1e-3 and sample <= 0.5)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.0, 0.5 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumberInSubrange( 1.0 - 1e-15, 0.5 )
        self.assertAlmostEqual( sample, 0.5, delta=1e-12 )

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1e-3)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LinLog ==,!= methods"
        diff_dist = Distribution.TabularCDFDistribution_LinLog( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularCDFDistribution_LinLog( [1e-3,1e-2,1e-1,1.0], [0.0,1e-1,1.0,1e2] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular CDF Distribution LogLin
class TabularCDFDistribution_LogLinTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularCDFDistribution_LogLin class"

    def setUp(self):
        self.dist = Distribution.TabularCDFDistribution_LogLin( [1e-3, 1e-2, 1e-1, 1.0], [0.0, 1e-1, 1.0, 1e2] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularCDFDistribution_LogLin))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-2 ) == 9.8901207583744611e-06)
        self.assertTrue(self.dist.evaluateCDF( 1e-1 ) == 1.0978034041795651e-03)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1 or bin_index == 2)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.0 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumber( 1.0 - 1e-15 )
        self.assertAlmostEqual( sample, 1.0, delta=1e-15 )

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample >= 1e-3 and sample <= 0.5)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.0, 0.5 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumberInSubrange( 1.0 - 1e-15, 0.5 )
        self.assertAlmostEqual( sample, 0.5, delta=1e-15 )

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1e-3)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLin ==,!= methods"
        diff_dist = Distribution.TabularCDFDistribution_LogLin( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularCDFDistribution_LogLin( [1e-3,1e-2,1e-1,1.0], [0.0,1e-1,1.0,1e2] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Tabular CDF Distribution LogLog
class TabularCDFDistribution_LogLogTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.TabularCDFDistribution_LogLog class"

    def setUp(self):
        self.dist = Distribution.TabularCDFDistribution_LogLog( [1e-3, 1e-2, 1e-1, 1.0], [0.0, 1e-1, 1.0, 1e2] )

    def testConstructor(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog constructor"
        self.assertTrue(isinstance(self.dist, Distribution.TabularCDFDistribution_LogLog))

    def testEvaluate(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluate( 1.0 ) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-2 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1e-1 ) == 0.0)
        self.assertTrue(self.dist.evaluatePDF( 1.0 ) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF( 0.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-3 ) == 0.0)
        self.assertTrue(self.dist.evaluateCDF( 1e-2 ) == 9.8901207583744611e-06)
        self.assertTrue(self.dist.evaluateCDF( 1e-1 ) == 1.0978034041795651e-03)
        self.assertTrue(self.dist.evaluateCDF( 1.0 ) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(trials == 1)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= 1e-3 and sample <= 1.0)
        self.assertTrue(bin_index == 0 or bin_index == 1 or bin_index == 2)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.0 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumber( 1.0 - 1e-15 )
        self.assertAlmostEqual( sample, 1.0, delta=1e-15 )

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.5 )
        self.assertTrue(sample >= 1e-3 and sample <= 0.5)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.0, 0.5 )
        self.assertTrue(sample == 1e-3)
        sample = self.dist.sampleWithRandomNumberInSubrange( 1.0 - 1e-15, 0.5 )
        self.assertAlmostEqual( sample, 0.5, delta=1e-15 )

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 1e-3)

    def testIsContinuous(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.TabularCDFDistribution_LogLog ==,!= methods"
        diff_dist = Distribution.TabularCDFDistribution_LogLog( [2.0,3.0,4.0], [1.0,1.0,1.0] )
        same_dist = Distribution.TabularCDFDistribution_LogLog( [1e-3,1e-2,1e-1,1.0], [0.0,1e-1,1.0,1e2] )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Uniform Distribution
class UniformDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.UniformDistribution class"

    def setUp(self):
        self.dist = Distribution.UniformDistribution( -1.0, 1.0 )

    def testConstructor(self):
        "*Test Utility.Distribution.UniformDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.UniformDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.UniformDistribution evaluate method"
        self.assertTrue(self.dist.evaluate(-2.0) == 0.0)
        self.assertTrue(self.dist.evaluate(-1.0) == 1.0)
        self.assertTrue(self.dist.evaluate(1.0) == 1.0)
        self.assertTrue(self.dist.evaluate(2.0) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.UniformDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF(-2.0) == 0.0)
        self.assertTrue(self.dist.evaluatePDF(-1.0) == 0.5)
        self.assertTrue(self.dist.evaluatePDF(1.0) == 0.5)
        self.assertTrue(self.dist.evaluatePDF(2.0) == 0.0)

    def testEvaluateCDF(self):
        "*Test Utility.Distribution.UniformDistribution evaluateCDF method"
        self.assertTrue(self.dist.evaluateCDF(-2.0) == 0.0)
        self.assertTrue(self.dist.evaluateCDF(-1.0) == 0.0)
        self.assertTrue(self.dist.evaluateCDF(1.0) == 1.0)
        self.assertTrue(self.dist.evaluateCDF(2.0) == 1.0)

    def testSample(self):
        "*Test Utility.Distribution.UniformDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.UniformDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= -1.0 and sample <= 1.0)

    def testSampleAndRecordBinIndex(self):
        "*Test Utility.Distribution.UniformDistribution sampleAndRecordBinIndex method"
        sample,bin_index = self.dist.sampleAndRecordBinIndex()
        self.assertTrue(sample >= -1.0 and sample <= 1.0)
        self.assertTrue(bin_index == 0)

    def testSampleWithRandomNumber(self):
        "*Test Utility.Distribution.UniformDistribution sampleWithRandomNumber method"
        sample = self.dist.sampleWithRandomNumber( 0.5 )
        self.assertTrue(sample == 0.0)

    def testSampleInSubrange(self):
        "*Test Utility.Distribution.UniformDistribution sampleInSubrange method"
        sample = self.dist.sampleInSubrange( 0.0 )
        self.assertTrue(sample >= -1.0 and sample <= 0.0)

    def testSampleWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.UniformDistribution sampleWithRandomNumberInSubrange method"
        sample = self.dist.sampleWithRandomNumberInSubrange( 0.5, 0.0 )
        self.assertTrue(sample == -0.5)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.UniformDistribution getUpperBoundIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.UniformDistribution getLowerBoundIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == -1.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.UniformDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.UniformDistribution isTabular method"
        self.assertTrue(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.UniformDistribution ==,!= methods"
        diff_dist = Distribution.UniformDistribution( -0.5, 0.5 )
        same_dist = Distribution.UniformDistribution( -1.0, 1.0 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Test the Watt Distribution
class WattDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.WattDistribution class"

    def setUp(self):
        self.dist = Distribution.WattDistribution( 1.0, 1.0, 1.0, 0.1 )

    def testConstructor(self):
        "*Test Utility.Distribution.WattDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.WattDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.WattDistribution evaluate method"
        self.assertTrue(self.dist.evaluate(0.0) == 0.0)
        self.assertTrue(self.dist.evaluate(0.9) != 0.0)
        self.assertTrue(self.dist.evaluate(1.0) == 0.0)

    def testEvaluatePDF(self):
        "*Test Utility.Distribution.WattDistribution evaluatePDF method"
        self.assertTrue(self.dist.evaluatePDF(0.0) == 0.0)
        self.assertTrue(self.dist.evaluatePDF(0.9) != 0.0)
        self.assertTrue(self.dist.evaluatePDF(1.0) == 0.0)

    def testSample(self):
        "*Test Utility.Distribution.WattDistribution sample method"
        sample = self.dist.sample()
        self.assertTrue(sample >= 0.0 and sample <= 0.9)

    def testSampleAndRecordTrials(self):
        "*Test Utility.Distribution.WattDistribution sampleAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleAndRecordTrials( trials )
        self.assertTrue(sample >= 0.0 and sample <= 0.9)
        self.assertTrue(trials != 0)

    def testGetUpperBoundOfIndepVar(self):
        "*Test Utility.Distribution.WattDistribution getUpperBoundOfIndepVar method"
        upper_bound = self.dist.getUpperBoundOfIndepVar()
        self.assertTrue(upper_bound == 0.9)

    def testGetLowerBoundOfIndepVar(self):
        "*Test Utility.Distribution.WattDistribution getLowerBoundOfIndepVar method"
        lower_bound = self.dist.getLowerBoundOfIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testIsContinuous(self):
        "*Test Utility.Distribution.WattDistribution isContinuous method"
        self.assertTrue(self.dist.isContinuous())

    def testIsTabular(self):
        "*Test Utility.Distribution.WattDistribution isTabular method"
        self.assertFalse(self.dist.isTabular())

    def testEquality(self):
        "*Test Utility.Distribution.WattDistribution ==,!= methods"
        diff_dist = Distribution.WattDistribution( 1.0, 1.0, 1.0, 0.5 )
        same_dist = Distribution.WattDistribution( 1.0, 1.0, 1.0, 0.1 )
        self.assertTrue(self.dist != diff_dist)
        self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(DeltaDistributionTestCase))
    suite.addTest(unittest.makeSuite(DiscreteDistributionTestCase))
    suite.addTest(unittest.makeSuite(EquiprobableBinDistributionTestCase))
    suite.addTest(unittest.makeSuite(EvaporationDistributionTestCase))
    suite.addTest(unittest.makeSuite(ExponentialDistributionTestCase))
    suite.addTest(unittest.makeSuite(HistogramDistributionTestCase))
    suite.addTest(unittest.makeSuite(MaxwellFissionDistributionTestCase))
    suite.addTest(unittest.makeSuite(NormalDistributionTestCase))
    suite.addTest(unittest.makeSuite(PolynomialDistributionTestCase))
    suite.addTest(unittest.makeSuite(PowerDistribution_1TestCase))
    suite.addTest(unittest.makeSuite(PowerDistribution_2TestCase))
    suite.addTest(unittest.makeSuite(TabularDistribution_LinLinTestCase))
    suite.addTest(unittest.makeSuite(TabularDistribution_LinLogTestCase))
    suite.addTest(unittest.makeSuite(TabularDistribution_LogLinTestCase))
    suite.addTest(unittest.makeSuite(TabularDistribution_LogLogTestCase))
    suite.addTest(unittest.makeSuite(TabularCDFDistribution_LinLinTestCase))
    suite.addTest(unittest.makeSuite(TabularCDFDistribution_LinLogTestCase))
    suite.addTest(unittest.makeSuite(TabularCDFDistribution_LogLinTestCase))
    suite.addTest(unittest.makeSuite(TabularCDFDistribution_LogLogTestCase))
    suite.addTest(unittest.makeSuite(UniformDistributionTestCase))
    suite.addTest(unittest.makeSuite(WattDistributionTestCase))

    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Utility.Distribution \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.Distribution.UnivariateDistribution.py
#-----------------------------------------------------------------------------#
