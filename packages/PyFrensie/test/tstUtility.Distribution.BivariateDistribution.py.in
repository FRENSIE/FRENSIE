#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.Distribution.BivariateDistribution class unit tests
#  \file   tstUtility.Distribution.BivariateDistribution.py
#  \author Luke Kersting
#  \brief  Unit tests for the Utility.Distribution.BivariateDistribution classes
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy
# from PyTrilinos.Teuchos import ParameterList

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')
Distribution = importPyFrensieModuleFromBuildDir('Utility.Distribution')
tol = 1e-12

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Interpolated Fully Tabular Basic Bivariate Distribution
class InterpolatedFullyTabularBasicBivariateDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.pInterpolatedFullyTabularBasicBivariateDistribution class"

    def setUp(self):
        tab_dist1 = Distribution.TabularDistribution_LogLog( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
        tab_dist2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )

        primary_indep = numpy.array([0.0,1.0])
        secondary_indep = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]]
        dep = [[0.5, 0.5, 0.5], [0.1, 0.5, 1.5, 3.5]]

        self.dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [tab_dist1, tab_dist2] )
        self.dist1 = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]], [[0.5, 0.5, 0.5], [0.1, 0.5, 1.5, 3.5]], 1e-3, 1e-7, 1e-16 )
        self.dist2 = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( primary_indep, secondary_indep, dep, 1e-3, 1e-7, 1e-16 )

    def testConstructor(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))
        self.assertTrue(isinstance(self.dist1, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))
        self.assertTrue(isinstance(self.dist2, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))

        # Using a univariate distribution that is not tabular should result
        # in an exception
        univariate_dista = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
        univariate_distb = Distribution.PowerDistribution_1( 0.0, 1.0 )

        exception_thrown = False

        try:
            bad_dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [univariate_dista, univariate_distb] )
        except:
            exception_thrown = True

        self.assertTrue( exception_thrown )

    def testEvaluate(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual(self.dist.evaluate( 1.0, 4.0 ), 0.1, delta=0.1*tol)
        self.assertTrue(self.dist.evaluate( 1.0, 5.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 1.0, 6.0 ) == 1.5)
        self.assertTrue(self.dist.evaluate( 1.0, 7.0 ) == 3.5)

    def testEvaluateSecondaryConditionalPDF(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalPDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 4.0 ),
                                2.6315789473684219e-02,
                                delta=2.6315789473684219e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 5.0 ),
                                1.3157894736842105e-01,
                                delta=1.3157894736842105e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 6.0 ),
                                3.9473684210526311e-01,
                                delta=3.9473684210526311e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 7.0 ),
                                9.2105263157894735e-01,
                                delta=9.2105263157894735e-01*tol)

    def testEvaluateSecondaryConditionalCDF(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalCDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 2.0 ) == 0.5 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 3.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 4.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 4.0 ) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 5.0 ),
                                7.8947368421052641e-02,
                                delta=7.8947368421052641e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 6.0 ),
                                3.4210526315789475e-01,
                                delta=3.4210526315789475e-01*tol)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 7.0 ) == 1.0 )

    def testSampleSecondaryConditional(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditional method"
        sample = self.dist.sampleSecondaryConditional( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 0.5 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        sample = self.dist.sampleSecondaryConditional( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)

    def testSampleSecondaryConditionalAndRecordTrials(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.0, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 1)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.5, trials )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        self.assertTrue(trials == 2)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 1.0, trials )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(trials == 3)

    def testSampleSecondaryConditionalAndRecordBinIndices(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordBinIndices method"
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.5 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(primary_bin_index == 1)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)

    def testSampleSecondaryConditionalWithRandomNumber(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumber method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 0.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 1.0 )
        self.assertTrue(sample == 3.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 0.0 )
        self.assertTrue(sample == 2.5)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 1.0 )
        self.assertTrue(sample == 5.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 0.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 1.0 )
        self.assertTrue(sample == 7.0)

    def testSampleSecondaryConditionalInSubrange(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalInSubrange method"
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.0, 2.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 2.0)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.5, 4.0 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 4.0)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 1.0, 5.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 5.0)

    def testSampleSecondaryConditionalWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumberInSubrange method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 0.0, 2.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 1.0, 2.0 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 0.0, 4.0 )
        self.assertTrue(sample == 2.5)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 1.0, 4.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 0.0, 5.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 1.0, 5.0 )
        self.assertTrue(sample == 5.0)

    def testGetUpperBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        upper_bound = self.dist.getUpperBoundOfPrimaryIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        lower_bound = self.dist.getLowerBoundOfPrimaryIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testGetUpperBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getUpperBoundOfSecondaryConditionalIndepVar method"
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(upper_bound == 5.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(upper_bound == 7.0)

    def testGetLowerBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getLowerBoundOfSecondaryConditionalIndepVar method"
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(lower_bound == 2.5)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(lower_bound == 4.0)

    def testIsPrimaryDimensionContinuous(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution isPrimaryDimensionContinuous method"
        self.assertTrue(self.dist.isPrimaryDimensionContinuous())

    def testIsPrimaryDimensionTabular(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution isPrimaryDimensionTabular method"
        self.assertTrue(self.dist.isPrimaryDimensionTabular())

    def testHasSamePrimaryBounds(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution hasSamePrimaryBounds method"
        diff_dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,2.0], [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]], [[0.5, 0.5, 0.5], [0.1, 0.5, 1.5, 3.5]] )

        self.assertTrue(self.dist.hasSamePrimaryBounds( self.dist1 ) )
        self.assertTrue(self.dist.hasSamePrimaryBounds( self.dist2 ) )
        self.assertTrue(not self.dist.hasSamePrimaryBounds( diff_dist ) )

#-----------------------------------------------------------------------------#
# Test the Interpolated Partially Tabular Basic Bivariate Distribution
class InterpolatedPartiallyTabularBasicBivariateDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution class"

    def setUp(self):
        tab_dist1 = Distribution.TabularDistribution_LogLog( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
        tab_dist2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )

        self.dist = Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [tab_dist1, tab_dist2] )

    def testConstructor(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution_LinLinLin_UnitBase))

    def testEvaluate(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual(self.dist.evaluate( 1.0, 4.0 ), 0.1, delta=0.1*tol)
        self.assertTrue(self.dist.evaluate( 1.0, 5.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 1.0, 6.0 ) == 1.5)
        self.assertTrue(self.dist.evaluate( 1.0, 7.0 ) == 3.5)

    def testEvaluateSecondaryConditionalPDF(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution evaluateSecondaryConditionalPDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 4.0 ),
                                2.6315789473684219e-02,
                                delta=2.6315789473684219e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 5.0 ),
                                1.3157894736842105e-01,
                                delta=1.3157894736842105e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 6.0 ),
                                3.9473684210526311e-01,
                                delta=3.9473684210526311e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 7.0 ),
                                9.2105263157894735e-01,
                                delta=9.2105263157894735e-01*tol)

    def testEvaluateSecondaryConditionalCDF(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution evaluateSecondaryConditionalCDF method"
        with self.assertRaises(AttributeError):
            self.dist.evaluateSecondaryConditionalCDF( 0.0, 1.0 )

    def testSampleSecondaryConditional(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditional method"
        sample = self.dist.sampleSecondaryConditional( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 0.5 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        sample = self.dist.sampleSecondaryConditional( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)

    def testSampleSecondaryConditionalAndRecordTrials(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.0, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 1)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.5, trials )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        self.assertTrue(trials == 2)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 1.0, trials )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(trials == 3)

    def testSampleSecondaryConditionalAndRecordBinIndices(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordBinIndices method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.0 )

    def testSampleSecondaryConditionalWithRandomNumber(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumber method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 1.0 )

    def testSampleSecondaryConditionalInSubrange(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalInSubrange method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalInSubrange( 1.0, 5.0 )

    def testSampleSecondaryConditionalWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumberInSubrange method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 1.0, 5.0 )

    def testGetUpperBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        upper_bound = self.dist.getUpperBoundOfPrimaryIndepVar()
        self.assertTrue(upper_bound == 1.0)

    def testGetLowerBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        lower_bound = self.dist.getLowerBoundOfPrimaryIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testGetUpperBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution getUpperBoundOfSecondaryConditionalIndepVar method"
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(upper_bound == 5.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(upper_bound == 7.0)

    def testGetLowerBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution getLowerBoundOfSecondaryConditionalIndepVar method"
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(lower_bound == 2.5)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(lower_bound == 4.0)

    def testIsPrimaryDimensionContinuous(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution isPrimaryDimensionContinuous method"
        self.assertTrue(self.dist.isPrimaryDimensionContinuous())

    def testIsPrimaryDimensionTabular(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution isPrimaryDimensionTabular method"
        self.assertTrue(self.dist.isPrimaryDimensionTabular())

    def testHasSamePrimaryBounds(self):
        "*Test Utility.Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution hasSamePrimaryBounds method"

        # Self test
        self.assertTrue( self.dist.hasSamePrimaryBounds( self.dist ) )

        # Create a test distribution with same lower bound, different upper bound
        primary_grid = [0.0, 2.0]
        # Create the secondary distribution in the first bin
        uniform_dist = Distribution.UniformDistribution( 0.0, 10.0, 0.1 )
        # Create the secondary distribution in the second bin
        exp_dist = Distribution.ExponentialDistribution( 1.0, 1.0, 0.0, 10.0 )
        secondary_dists = [uniform_dist, exp_dist]

        test_dist = Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution_LinLinLin_UnitBase(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse( self.dist.hasSamePrimaryBounds( test_dist ) )

        # Create a test distribution with different lower bound, same upper bound
        primary_grid = [0.5, 1.0]

        test_dist = Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution_LinLinLin_UnitBase(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse( self.dist.hasSamePrimaryBounds( test_dist ) )

        # Create a test distribution with different bounds
        primary_grid = [30.0, 100.0]

        test_dist = Distribution.InterpolatedPartiallyTabularBasicBivariateDistribution_LinLinLin_UnitBase(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse( self.dist.hasSamePrimaryBounds( test_dist ) )


#-----------------------------------------------------------------------------#
# Test the Histogram Fully Tabular Basic Bivariate Distribution
class HistogramFullyTabularBasicBivariateDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution class"

    def setUp(self):
        tab_dist1 = Distribution.TabularDistribution_LinLin( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
        tab_dist2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
        tab_dist3 = Distribution.TabularDistribution_LinLin( [8.0, 9.0], [0.1, 1.0] )
        self.dist = Distribution.HistogramFullyTabularBasicBivariateDistribution( [0.0,1.0,2.0], [tab_dist1, tab_dist2, tab_dist3] )

    def testConstructor(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.HistogramFullyTabularBasicBivariateDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 3.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.5, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.5, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.5, 3.0 ) == 0.5)
        self.assertAlmostEqual(self.dist.evaluate( 1.0, 4.0 ), 0.1, delta=0.1*tol)
        self.assertTrue(self.dist.evaluate( 1.0, 5.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 1.0, 6.0 ) == 1.5)
        self.assertTrue(self.dist.evaluate( 1.0, 7.0 ) == 3.5)

    def testEvaluateSecondaryConditionalPDF(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalPDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 4.0 ),
                                2.6315789473684219e-02,
                                delta=2.6315789473684219e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 5.0 ),
                                1.3157894736842105e-01,
                                delta=1.3157894736842105e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 6.0 ),
                                3.9473684210526311e-01,
                                delta=3.9473684210526311e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 7.0 ),
                                9.2105263157894735e-01,
                                delta=9.2105263157894735e-01*tol)

    def testEvaluateSecondaryConditionalCDF(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalCDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 2.0 ) == 0.5 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 3.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 4.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0-1e-12, 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0-1e-12, 2.0 ) == 0.5 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0-1e-12, 3.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0-1e-12, 4.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 4.0 ) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 5.0 ),
                                7.8947368421052641e-02,
                                delta=7.8947368421052641e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 6.0 ),
                                3.4210526315789475e-01,
                                delta=3.4210526315789475e-01*tol)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 7.0 ) == 1.0 )

    def testSampleSecondaryConditional(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditional method"
        sample = self.dist.sampleSecondaryConditional( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 0.5 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)

    def testSampleSecondaryConditionalAndRecordTrials(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.0, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 1)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.5, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 2)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 1.0, trials )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(trials == 3)

    def testSampleSecondaryConditionalAndRecordBinIndices(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordBinIndices method"
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.5 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(primary_bin_index == 1)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)

    def testSampleSecondaryConditionalWithRandomNumber(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumber method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 0.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 1.0 )
        self.assertTrue(sample == 3.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 0.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 1.0 )
        self.assertTrue(sample == 3.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 0.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 1.0 )
        self.assertTrue(sample == 7.0)

    def testSampleSecondaryConditionalInSubrange(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditionalInSubrange method"
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.0, 2.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 2.0)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.5, 2.5 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 2.5)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 1.0, 5.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 5.0)

    def testSampleSecondaryConditionalWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumberInSubrange method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 0.0, 2.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 1.0, 2.0 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 0.0, 2.5 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 1.0, 2.5 )
        self.assertTrue(sample == 2.5)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 0.0, 5.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 1.0, 5.0 )
        self.assertTrue(sample == 5.0)

    def testGetUpperBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        upper_bound = self.dist.getUpperBoundOfPrimaryIndepVar()
        self.assertTrue(upper_bound == 2.0)

    def testGetLowerBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        lower_bound = self.dist.getLowerBoundOfPrimaryIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testGetUpperBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution getUpperBoundOfSecondaryConditionalIndepVar method"
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(upper_bound == 7.0)

    def testGetLowerBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution getLowerBoundOfSecondaryConditionalIndepVar method"
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(lower_bound == 4.0)

    def testIsPrimaryDimensionContinuous(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution isPrimaryDimensionContinuous method"
        self.assertTrue(self.dist.isPrimaryDimensionContinuous())

    def testIsPrimaryDimensionTabular(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution isPrimaryDimensionTabular method"
        self.assertTrue(self.dist.isPrimaryDimensionTabular())

    def testHasSamePrimaryBounds(self):
        "*Test Utility.Distribution.HistogramFullyTabularBasicBivariateDistribution hasSamePrimaryBounds method"

        # Create a test distribution with same lower bound, different upper bound
        primary_grid = [0.0, 2.0]

        delta_dist1 = Distribution.DeltaDistribution( 0.0 )
        delta_dist2 = Distribution.DeltaDistribution( 1.0 )

        secondary_dists = [delta_dist1, delta_dist2]

        test_dist = Distribution.HistogramFullyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )


        self.assertTrue(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [-1.0, 2.0]
        test_dist = Distribution.HistogramFullyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [0.0, 3.0]
        test_dist = Distribution.HistogramFullyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [-1.0, 3.0]
        test_dist = Distribution.HistogramFullyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

#-----------------------------------------------------------------------------#
# Test the Histogram Partially Tabular Basic Bivariate Distribution
class HistogramPartiallyTabularBasicBivariateDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution class"

    def setUp(self):
        tab_dist1 = Distribution.TabularDistribution_LinLin( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
        tab_dist2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
        tab_dist3 = Distribution.TabularDistribution_LinLin( [8.0, 9.0], [0.1, 1.0] )
        self.dist = Distribution.HistogramPartiallyTabularBasicBivariateDistribution( [0.0,1.0,2.0], [tab_dist1, tab_dist2, tab_dist3] )

    def testConstructor(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.HistogramPartiallyTabularBasicBivariateDistribution))

    def testEvaluate(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual(self.dist.evaluate( 1.0, 4.0 ), 0.1, delta=0.1*tol)
        self.assertTrue(self.dist.evaluate( 1.0, 5.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 1.0, 6.0 ) == 1.5)
        self.assertTrue(self.dist.evaluate( 1.0, 7.0 ) == 3.5)

    def testEvaluateSecondaryConditionalPDF(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution evaluateSecondaryConditionalPDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 4.0 ),
                                2.6315789473684219e-02,
                                delta=2.6315789473684219e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 5.0 ),
                                1.3157894736842105e-01,
                                delta=1.3157894736842105e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 6.0 ),
                                3.9473684210526311e-01,
                                delta=3.9473684210526311e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 7.0 ),
                                9.2105263157894735e-01,
                                delta=9.2105263157894735e-01*tol)

    def testEvaluateSecondaryConditionalCDF(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution evaluateSecondaryConditionalCDF method"
        with self.assertRaises(AttributeError):
            self.dist.evaluateSecondaryConditionalCDF( 0.0, 1.0 )

    def testSampleSecondaryConditional(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditional method"
        sample = self.dist.sampleSecondaryConditional( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 0.5 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)

    def testSampleSecondaryConditionalAndRecordTrials(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.0, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 1)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.5, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 2)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 1.0, trials )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(trials == 3)

    def testSampleSecondaryConditionalAndRecordBinIndices(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordBinIndices method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.0 )

    def testSampleSecondaryConditionalWithRandomNumber(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumber method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 1.0 )

    def testSampleSecondaryConditionalInSubrange(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalInSubrange method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalInSubrange( 1.0, 5.0 )

    def testSampleSecondaryConditionalWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumberInSubrange method"
        with self.assertRaises(AttributeError):
            self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 1.0, 5.0 )

    def testGetUpperBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        upper_bound = self.dist.getUpperBoundOfPrimaryIndepVar()
        self.assertTrue(upper_bound == 2.0)

    def testGetLowerBoundOfPrimaryIndepVar(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution getUpperBoundOfPrimaryIndepVar method"
        lower_bound = self.dist.getLowerBoundOfPrimaryIndepVar()
        self.assertTrue(lower_bound == 0.0)

    def testGetUpperBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution getUpperBoundOfSecondaryConditionalIndepVar method"
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.5 )
        print self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(upper_bound == 3.0)
        upper_bound = self.dist.getUpperBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(upper_bound == 7.0)

    def testGetLowerBoundOfSecondaryConditionalIndepVar(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution getLowerBoundOfSecondaryConditionalIndepVar method"
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.0 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 0.5 )
        self.assertTrue(lower_bound == 1.0)
        lower_bound = self.dist.getLowerBoundOfSecondaryConditionalIndepVar( 1.0 )
        self.assertTrue(lower_bound == 4.0)

    def testIsPrimaryDimensionContinuous(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution isPrimaryDimensionContinuous method"
        self.assertTrue(self.dist.isPrimaryDimensionContinuous())

    def testIsPrimaryDimensionTabular(self):
        "*Test Utility.Distribution.HistogramPartiallyTabularBasicBivariateDistribution isPrimaryDimensionTabular method"
        self.assertTrue(self.dist.isPrimaryDimensionTabular())

        # Create a test distribution with same lower bound, different upper bound
        primary_grid = [0.0, 2.0]

        delta_dist1 = Distribution.DeltaDistribution( 0.0 )
        delta_dist2 = Distribution.DeltaDistribution( 1.0 )

        secondary_dists = [delta_dist1, delta_dist2]

        test_dist = Distribution.HistogramPartiallyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )


        self.assertTrue(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [-1.0, 2.0]
        test_dist = Distribution.HistogramPartiallyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [0.0, 3.0]
        test_dist = Distribution.HistogramPartiallyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

        primary_grid = [-1.0, 3.0]
        test_dist = Distribution.HistogramPartiallyTabularBasicBivariateDistribution(
                                                           primary_grid,
                                                           secondary_dists )

        self.assertFalse(self.dist.hasSamePrimaryBounds( test_dist ) )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(InterpolatedFullyTabularBasicBivariateDistributionTestCase))
    suite.addTest(unittest.makeSuite(InterpolatedPartiallyTabularBasicBivariateDistributionTestCase))
    suite.addTest(unittest.makeSuite(HistogramFullyTabularBasicBivariateDistributionTestCase))
    suite.addTest(unittest.makeSuite(HistogramPartiallyTabularBasicBivariateDistributionTestCase))

    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Utility.Distribution \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.Distribution.BivariateDistribution.py
#-----------------------------------------------------------------------------#
