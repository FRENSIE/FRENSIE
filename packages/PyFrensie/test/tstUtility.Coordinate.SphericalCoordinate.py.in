#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.Coordinate.SphericalCoordinate class unit tests
#  \file   tstUtility.Coordinate.SphericalCoordinate.py
#  \author Luke Kersting
#  \brief  Unit tests for the Utility.Coordinate.SphericalCoordinate classes
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy as nm

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')
Coordinate = importPyFrensieModuleFromBuildDir('Utility.Coordinate')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Translation Spherical Spatial Coordinate Conversion Policy
class TranslationSphericalSpatialCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0] )

    def testConstructor(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy( [2.0, 1.0])

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.SPHERICAL_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 0.0, 0.0, 0.0 )
        self.assertTrue( x_spatial_coord == 1.0 )
        self.assertTrue( y_spatial_coord == 2.0 )
        self.assertTrue( z_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 0.0, 0.0, 0.0 ) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.TranslationSphericalSpatialCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 0.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 1.0, 2.0, 3.0 ) )
        self.assertTrue( spatial_coords[0] == 0.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 0.0 )

#-----------------------------------------------------------------------------#
# Test the General Spherical Spatial Coordinate Conversion Policy
class GeneralSphericalSpatialCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0], [2.0, 1.0, 2.0])

    def testConstructor(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy( [1.0, 2.0], [2.0, 1.0, 2.0])
        with self.assertRaises(TypeError):
            Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0], [1.0, 2.0])

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.SPHERICAL_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 0.0, 0.0, 0.0 )
        self.assertTrue( x_spatial_coord == 1.0 )
        self.assertTrue( y_spatial_coord == 2.0 )
        self.assertTrue( z_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 0.0, 0.0, 0.0 ) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.GeneralSphericalSpatialCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 0.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 1.0, 2.0, 3.0 ) )
        self.assertTrue( spatial_coords[0] == 0.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 0.0 )

#-----------------------------------------------------------------------------#
# Test the Rotation Spherical Coordinate Conversion Policy
class RotationSphericalCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.RotationSphericalCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.RotationSphericalCoordinateConversionPolicy([1.0, 1.0, 1.0])

    def testConstructor(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.RotationSphericalCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.RotationSphericalCoordinateConversionPolicy([1.0, 1.0])

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.SPHERICAL_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 2.0, 0.0, 1.0 )
        self.assertAlmostEqual( x_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( y_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( z_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 2.0, 0.0, 1.0 ) )
        self.assertAlmostEqual( spatial_coords[0], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( spatial_coords[1], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( spatial_coords[2], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 2.0/nm.sqrt(3.0), 2.0/nm.sqrt(3.0), 2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( primary_spatial_coord, 2.0, delta=1e-15*2.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 1.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 2.0/nm.sqrt(3.0), 2.0/nm.sqrt(3.0), 2.0/nm.sqrt(3.0) ) )
        self.assertAlmostEqual( spatial_coords[0], 2.0, delta=1e-15*2.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 1.0 )

    def testGetLocalDirectionalCoordinateSystemType(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy getLocalDirectionalCoordinateSystemType"
        self.assertTrue( self.policy.getLocalDirectionalCoordinateSystemType() == Coordinate.SPHERICAL_DIRECTIONAL_COORDINATE_SYSTEM )

    def testIsPrimaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isPrimaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isPrimaryDirectionalCoordinateValid( 1.0 ) )

    def testIsSecondaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isSecondaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isSecondaryDirectionalCoordinateValid( 1.0 ) )

    def testIsTertiaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy isTertiaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isTertiaryDirectionalCoordinateValid( 1.0 ) )

    def testNormalizeLocalDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy normalizeLocalDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.normalizeLocalDirectionalCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 2.0 )
        self.assertTrue( tertiary_spatial_coord == 3.0 )

    def testNormalizeCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy normalizeCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeCartesianDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testConvertToCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy convertToCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianDirectionalCoordinates( 0.0, 0.0, 1.0 )
        self.assertTrue( x_spatial_coord == 1.0/nm.sqrt(3.0) )
        self.assertTrue( y_spatial_coord == 1.0/nm.sqrt(3.0) )
        self.assertTrue( z_spatial_coord == 1.0/nm.sqrt(3.0) )


    def testConvertFromCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationSphericalCoordinateConversionPolicy convertFromCartesianDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianDirectionalCoordinates( 1.0/nm.sqrt(6.0), 1.0/nm.sqrt(6.0), -nm.sqrt(2.0/3.0) )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

#-----------------------------------------------------------------------------#
# Test the Basic Spherical Coordinate Conversion Policy
class BasicSphericalCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.BasicSphericalCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.BasicSphericalCoordinateConversionPolicy()

    def testConstructor(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.BasicSphericalCoordinateConversionPolicy) )

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.SPHERICAL_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 2.0, 0.0, 1.0 )
        self.assertTrue( x_spatial_coord == 0.0 )
        self.assertTrue( y_spatial_coord == 0.0 )
        self.assertTrue( z_spatial_coord == 2.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( (2.0, 0.0, 1.0) )
        self.assertTrue( spatial_coords[0] == 0.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 2.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 0.0, 0.0, 2.0 )
        self.assertTrue( primary_spatial_coord == 2.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 1.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( (0.0, 0.0, 2.0) )
        self.assertTrue( spatial_coords[0] == 2.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 1.0 )

    def testGetLocalDirectionalCoordinateSystemType(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy getLocalDirectionalCoordinateSystemType"
        self.assertTrue( self.policy.getLocalDirectionalCoordinateSystemType() == Coordinate.SPHERICAL_DIRECTIONAL_COORDINATE_SYSTEM )

    def testIsPrimaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isPrimaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isPrimaryDirectionalCoordinateValid( 1.0 ) )

    def testIsSecondaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isSecondaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isSecondaryDirectionalCoordinateValid( 1.0 ) )

    def testIsTertiaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy isTertiaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isTertiaryDirectionalCoordinateValid( 1.0 ) )

    def testNormalizeLocalDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy normalizeLocalDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.normalizeLocalDirectionalCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 2.0 )
        self.assertTrue( tertiary_spatial_coord == 3.0 )

    def testNormalizeCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy normalizeCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeCartesianDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testConvertToCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy convertToCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianDirectionalCoordinates( 1.0, 0.0, 1.0 )
        self.assertTrue( x_spatial_coord == 0.0 )
        self.assertTrue( y_spatial_coord == 0.0 )
        self.assertTrue( z_spatial_coord == 1.0 )

    def testConvertFromCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicSphericalCoordinateConversionPolicy convertFromCartesianDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianDirectionalCoordinates( 0.0, 0.0, 1.0 )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 1.0 )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # # Initialize the FRENSIE random number generator
    # Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(TranslationSphericalSpatialCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(GeneralSphericalSpatialCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(RotationSphericalCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(BasicSphericalCoordinateConversionPolicyTestCase))


    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Utility.Coordinate \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.Coordinate.SphericalCoordinate.py
#-----------------------------------------------------------------------------#
