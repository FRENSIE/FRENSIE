#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Event.CellTrackLengthFluxEstimatorDagMC class unit tests
#  \file   tstMonteCarlo.Event.CellTrackLengthFluxEstimatorDagMC.py
#  \author Luke Kersting
#  \brief  Unit tests for the MonteCarlo.Event.CellTrackLengthFluxEstimatorDagMC class
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import os
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-f", "--test_cad_file", type="string", dest="test_cad_file",
                  help="Test CAD file name with path.")

options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
DagMC = importPyFrensieModuleFromBuildDir('Geometry.DagMC')
Event = importPyFrensieModuleFromBuildDir('MonteCarlo.Event')

#---------------------------------------------------------------------------#
# Tests.
#---------------------------------------------------------------------------#
#
# Test the CellTrackLengthFluxEstimatorDagMC class
class CellTrackLengthFluxEstimatorDagMCTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.ActiveRegion.CellTrackLengthFluxEstimatorDagMC class"

    def setUp(self):
      # Setup the DagMC Geometry
      local_properties = DagMC.DagMCModelProperties( options.test_cad_file )

      local_properties.setTerminationCellPropertyName( "graveyard" )
      local_properties.setMaterialPropertyName( "mat" )
      local_properties.setDensityPropertyName( "rho" )
      local_properties.setEstimatorPropertyName( "tally" )

      self.model = DagMC.DagMCModel( local_properties )

    def testConstructor(self):
        "*Test MonteCarlo.ActiveRegion.CellTrackLengthFluxEstimatorDagMC constructor"

        cell_ids = [1, 3, 5, 7, 9, 13, 19, 26, 27]
        estimator = Event.WeightMultipliedCellTrackLengthFluxEstimator(
                   0,
                   1.0,
                   cell_ids,
                   self.model )

        self.assertTrue( estimator.isEntityAssigned( 1 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 1 ),
                                   2.132266328649779098e+03,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 3 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 3 ),
                                   5.337717195447306722e+02,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 5 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 5 ),
                                   1.078483030349183309e+03,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 7 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 7 ),
                                   2.482476000774601346e+02,
                                   delta=1e-11 )

        self.assertTrue( estimator.isEntityAssigned( 9 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 9 ),
                                   1.887322331807171395e+03,
                                   delta=1e-11 )

        self.assertTrue( estimator.isEntityAssigned( 13 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 13 ),
                                   1.539742731416566357e+03,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 19 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 19 ),
                                   1.023254801497048874e+02,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 26 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 26 ),
                                   9.849801369760180023e+02,
                                   delta=1e-15 )

        self.assertTrue( estimator.isEntityAssigned( 27 ) )
        self.assertAlmostEqual( estimator.getEntityNormConstant( 27 ),
                                   9.832238399999994272e+01,
                                   delta=1e-15 )


#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the testSuite object
    suite = unittest.TestSuite()

    # Add the test cases to the testSuite
    suite.addTest(unittest.makeSuite(CellTrackLengthFluxEstimatorDagMCTestCase))


    print >>sys.stderr, \
        "\n**************************************\n" + \
        "Testing MonteCarlo.Model \n" + \
        "**************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Event.CellTrackLengthFluxEstimatorDagMC.py
#-----------------------------------------------------------------------------#
