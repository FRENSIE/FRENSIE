#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Event.CellTrackLengthFluxEstimator class unit tests
#  \file   tstMonteCarlo.Event.CellTrackLengthFluxEstimator.py
#  \author Luke Kersting
#  \brief  Unit tests for the MonteCarlo.Event.CellTrackLengthFluxEstimator class
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import os
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")

options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Event = importPyFrensieModuleFromBuildDir('MonteCarlo.Event')

#---------------------------------------------------------------------------#
# Tests.
#---------------------------------------------------------------------------#
# Test the CellTrackLengthFluxEstimator class
class CellTrackLengthFluxEstimatorTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Event.CellTrackLengthFluxEstimator class"

    def testCheck_type(self):
        "*Test MonteCarlo.Event.CellTrackLengthFluxEstimator check_type"

        cell_ids = [0, 1]

        cell_norm_consts = [1.0, 2.0]

        estimator = Event.WeightMultipliedCellTrackLengthFluxEstimator(
                   0,
                   10.0,
                   cell_ids,
                   cell_norm_consts )

        self.assertTrue( estimator.isCellEstimator() )
        self.assertFalse( estimator.isSurfaceEstimator() )
        self.assertFalse( estimator.isMeshEstimator() )

        estimator = Event.WeightMultipliedCellTrackLengthFluxEstimator(
                   1,
                   10.0,
                   cell_ids,
                   cell_norm_consts )

        self.assertTrue( estimator.isCellEstimator() )
        self.assertFalse( estimator.isSurfaceEstimator() )
        self.assertFalse( estimator.isMeshEstimator() )

    def testUpdateFromParticleSubtrackEndingInCellEvent(self):
        "*Test MonteCarlo.Event.CellTrackLengthFluxEstimator updateFromParticleSubtrackEndingInCellEvent"

        cell_ids = [0, 1]

        cell_norm_consts = [1.0, 2.0]

        estimator_1 = Event.WeightMultipliedCellTrackLengthFluxEstimator(
                   0,
                   10.0,
                   cell_ids,
                   cell_norm_consts )

        estimator_1_base = estimator_1

        estimator_2 = Event.WeightAndEnergyMultipliedCellTrackLengthFluxEstimator(
                   1,
                   10.0,
                   cell_ids,
                   cell_norm_consts )
        estimator_2_base = estimator_2

        estimator_3 = Event.WeightAndChargeMultipliedCellTrackLengthFluxEstimator(
                   2,
                   1.0,
                   cell_ids,
                   cell_norm_consts )
        estimator_3_base = estimator_3

        # Set the energy bins
        energy_bin_boundaries = [None] * ( 3 )
        energy_bin_boundaries[0] = 0.0
        energy_bin_boundaries[1] = 0.1
        energy_bin_boundaries[2] = 1.0

        estimator_1_base.setEnergyDiscretization(
                   energy_bin_boundaries )
        estimator_2_base.setEnergyDiscretization(
                   energy_bin_boundaries )
        estimator_3_base.setEnergyDiscretization(
                   energy_bin_boundaries )

        # Set the time bins
        time_bin_boundaries = [None] * ( 3 )
        time_bin_boundaries[0] = 0.0
        time_bin_boundaries[1] = 1.66782047599076e-11
        time_bin_boundaries[2] = 3.33564095198152e-11

        time_discretization = Event.ObserverTimeDimensionDiscretization( time_bin_boundaries )

        estimator_1_base.setDiscretization( time_discretization )
        estimator_2_base.setDiscretization( time_discretization )
        estimator_3_base.setDiscretization( time_discretization )

        # Set collision number bins
        collision_number_bins = [None] * ( 2 )
        collision_number_bins[0] = 0
        collision_number_bins[1] = 1

        estimator_1_base.setCollisionNumberDiscretization(
                   collision_number_bins )
        estimator_2_base.setCollisionNumberDiscretization(
                   collision_number_bins )
        estimator_3_base.setCollisionNumberDiscretization(
                   collision_number_bins )

        # Set the particle types
        particle_types = [None] * ( 1 )
        particle_types[0] = MonteCarlo.PHOTON

        estimator_1_base.setParticleTypes( particle_types )
        estimator_2_base.setParticleTypes( particle_types )
        estimator_3_base.setParticleTypes( particle_types )

        self.assertFalse( estimator_1_base.hasUncommittedHistoryContribution() )
        self.assertFalse( estimator_2_base.hasUncommittedHistoryContribution() )
        self.assertFalse( estimator_3_base.hasUncommittedHistoryContribution() )

        # bin 0, 2
        particle = MonteCarlo.PhotonState( 0 )
        particle.setEnergy( 1.0 )
        particle.setTime( 3.33564095198152e-11 )
        particle.setWeight( 1.0 )

        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        self.assertTrue( estimator_1.hasUncommittedHistoryContribution() )
        self.assertTrue( estimator_2.hasUncommittedHistoryContribution() )
        self.assertTrue( estimator_3.hasUncommittedHistoryContribution() )

        # bin 1, 3
        particle.setEnergy( 0.1 )

        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        particle.setWeight( 10.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        particle.setWeight( 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        # bin 4, 6
        particle.incrementCollisionNumber()
        particle.setEnergy( 1.0 )
        particle.setWeight( 1.0 )

        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        # bin 5, 7
        particle.setEnergy( 0.1 )

        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_1.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        particle.setWeight( 10.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_2.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        particle.setWeight( 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 0, 1.0 )
        estimator_3.updateFromParticleSubtrackEndingInCellEvent( particle, 1, 1.0 )

        # Commit the contributions
        estimator_1_base.commitHistoryContribution()
        estimator_2_base.commitHistoryContribution()
        estimator_3_base.commitHistoryContribution()

        self.assertFalse( estimator_1_base.hasUncommittedHistoryContribution() )
        self.assertFalse( estimator_2_base.hasUncommittedHistoryContribution() )
        self.assertFalse( estimator_3_base.hasUncommittedHistoryContribution() )

        Event.ParticleHistoryObserver.setNumberOfHistories( 1.0 )
        Event.ParticleHistoryObserver.setElapsedTime( 1.0 )

        # Check the entity bin data moments
        entity_bin_first_moments = estimator_1_base.getEntityBinDataFirstMoments( 0 )
        entity_bin_second_moments = estimator_1_base.getEntityBinDataSecondMoments( 0 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.5 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.25 ] )

        entity_bin_first_moments = estimator_1_base.getEntityBinDataFirstMoments( 1 )
        entity_bin_second_moments = estimator_1_base.getEntityBinDataSecondMoments( 1 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.5 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.25 ] )

        entity_bin_first_moments = estimator_2_base.getEntityBinDataFirstMoments( 0 )
        entity_bin_second_moments = estimator_2_base.getEntityBinDataSecondMoments( 0 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.5 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.25 ] )

        entity_bin_first_moments = estimator_2_base.getEntityBinDataFirstMoments( 1 )
        entity_bin_second_moments = estimator_2_base.getEntityBinDataSecondMoments( 1 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.5 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.25 ] )

        entity_bin_first_moments = estimator_3_base.getEntityBinDataFirstMoments( 0 )
        entity_bin_second_moments = estimator_3_base.getEntityBinDataSecondMoments( 0 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.0 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.0 ] )

        entity_bin_first_moments = estimator_3_base.getEntityBinDataFirstMoments( 1 )
        entity_bin_second_moments = estimator_3_base.getEntityBinDataSecondMoments( 1 )

        self.assertSequenceEqual( list(entity_bin_first_moments),8*[ 0.0 ] )
        self.assertSequenceEqual( list(entity_bin_second_moments),8*[ 0.0 ] )

        # Check the total bin data moments
        total_bin_first_moments = estimator_1_base.getTotalBinDataFirstMoments()
        total_bin_second_moments = estimator_1_base.getTotalBinDataSecondMoments()

        self.assertSequenceEqual( list(total_bin_first_moments), [ 1.0 ]*8 )
        self.assertSequenceEqual( list(total_bin_second_moments), [ 1.0 ]*8 )

        total_bin_first_moments = estimator_2_base.getTotalBinDataFirstMoments()
        total_bin_second_moments = estimator_2_base.getTotalBinDataSecondMoments()

        self.assertSequenceEqual( list(total_bin_first_moments), [ 1.0 ]*8 )
        self.assertSequenceEqual( list(total_bin_second_moments), [ 1.0 ]*8 )

        total_bin_first_moments = estimator_3_base.getTotalBinDataFirstMoments()
        total_bin_second_moments = estimator_3_base.getTotalBinDataSecondMoments()

        self.assertSequenceEqual( list(total_bin_first_moments), [ 0.0 ]*8 )
        self.assertSequenceEqual( list(total_bin_second_moments), [ 0.0 ]*8 )

        # Check the entity total data moments
        entity_total_first_moments = estimator_1_base.getEntityTotalDataFirstMoments( 0 )
        entity_total_second_moments = estimator_1_base.getEntityTotalDataSecondMoments( 0 )
        entity_total_third_moments = estimator_1_base.getEntityTotalDataThirdMoments( 0 )
        entity_total_fourth_moments = estimator_1_base.getEntityTotalDataFourthMoments( 0 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 4.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 16.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 256.0 ]*1 )

        entity_total_first_moments = estimator_1_base.getEntityTotalDataFirstMoments( 1 )
        entity_total_second_moments = estimator_1_base.getEntityTotalDataSecondMoments( 1 )
        entity_total_third_moments = estimator_1_base.getEntityTotalDataThirdMoments( 1 )
        entity_total_fourth_moments = estimator_1_base.getEntityTotalDataFourthMoments( 1 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 4.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 16.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 256.0 ]*1 )

        entity_total_first_moments = estimator_2_base.getEntityTotalDataFirstMoments( 0 )
        entity_total_second_moments = estimator_2_base.getEntityTotalDataSecondMoments( 0 )
        entity_total_third_moments = estimator_2_base.getEntityTotalDataThirdMoments( 0 )
        entity_total_fourth_moments = estimator_2_base.getEntityTotalDataFourthMoments( 0 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 4.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 16.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 256.0 ]*1 )

        entity_total_first_moments = estimator_2_base.getEntityTotalDataFirstMoments( 1 )
        entity_total_second_moments = estimator_2_base.getEntityTotalDataSecondMoments( 1 )
        entity_total_third_moments = estimator_2_base.getEntityTotalDataThirdMoments( 1 )
        entity_total_fourth_moments = estimator_2_base.getEntityTotalDataFourthMoments( 1 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 4.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 16.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 256.0 ]*1 )

        entity_total_first_moments = estimator_3_base.getEntityTotalDataFirstMoments( 0 )
        entity_total_second_moments = estimator_3_base.getEntityTotalDataSecondMoments( 0 )
        entity_total_third_moments = estimator_3_base.getEntityTotalDataThirdMoments( 0 )
        entity_total_fourth_moments = estimator_3_base.getEntityTotalDataFourthMoments( 0 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 0.0 ] )

        entity_total_first_moments = estimator_3_base.getEntityTotalDataFirstMoments( 1 )
        entity_total_second_moments = estimator_3_base.getEntityTotalDataSecondMoments( 1 )
        entity_total_third_moments = estimator_3_base.getEntityTotalDataThirdMoments( 1 )
        entity_total_fourth_moments = estimator_3_base.getEntityTotalDataFourthMoments( 1 )

        self.assertSequenceEqual( list(entity_total_first_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_second_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_third_moments), [ 0.0 ] )
        self.assertSequenceEqual( list(entity_total_fourth_moments), [ 0.0 ] )

        # Check the total data moments
        total_first_moments = estimator_1_base.getTotalDataFirstMoments()
        total_second_moments = estimator_1_base.getTotalDataSecondMoments()
        total_third_moments = estimator_1_base.getTotalDataThirdMoments()
        total_fourth_moments = estimator_1_base.getTotalDataFourthMoments()

        self.assertSequenceEqual( list(total_first_moments), [ 8.0 ]*1 )
        self.assertSequenceEqual( list(total_second_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(total_third_moments), [ 512.0 ]*1 )
        self.assertSequenceEqual( list(total_fourth_moments), [ 4096.0 ]*1 )

        total_first_moments = estimator_2_base.getTotalDataFirstMoments()
        total_second_moments = estimator_2_base.getTotalDataSecondMoments()
        total_third_moments = estimator_2_base.getTotalDataThirdMoments()
        total_fourth_moments = estimator_2_base.getTotalDataFourthMoments()

        self.assertSequenceEqual( list(total_first_moments), [ 8.0 ]*1 )
        self.assertSequenceEqual( list(total_second_moments), [ 64.0 ]*1 )
        self.assertSequenceEqual( list(total_third_moments), [ 512.0 ]*1 )
        self.assertSequenceEqual( list(total_fourth_moments), [ 4096.0 ]*1 )

        total_first_moments = estimator_3_base.getTotalDataFirstMoments()
        total_second_moments = estimator_3_base.getTotalDataSecondMoments()
        total_third_moments = estimator_3_base.getTotalDataThirdMoments()
        total_fourth_moments = estimator_3_base.getTotalDataFourthMoments()

        self.assertSequenceEqual( list(total_first_moments), [ 0.0 ]*1 )
        self.assertSequenceEqual( list(total_second_moments), [ 0.0 ]*1 )
        self.assertSequenceEqual( list(total_third_moments), [ 0.0 ]*1 )
        self.assertSequenceEqual( list(total_fourth_moments), [ 0.0 ]*1 )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the testSuite object
    suite = unittest.TestSuite()

    # Add the test cases to the testSuite
    suite.addTest(unittest.makeSuite(CellTrackLengthFluxEstimatorTestCase))


    print >>sys.stderr, \
        "\n**************************************\n" + \
        "Testing MonteCarlo.Model \n" + \
        "**************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Event.CellTrackLengthFluxEstimator.py
#-----------------------------------------------------------------------------#
