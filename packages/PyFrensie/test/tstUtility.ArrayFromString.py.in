#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.ArrayFromString module unit tests
#  \file   tstUtility.ArrayFromString.py
#  \author Alex Robinson
#  \brief  Unit tests for the Utility module
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy
import math as m

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the array from string methods
class ArrayFromString(unittest.TestCase):
    "TestCase class for Utility arrayFromString methods"

    def testIntArrayFromString(self):
        "*Test Utility.intArrayFromString method"
        array = list(Utility.intArrayFromString( "{}" ))

        self.assertSequenceEqual( list(array), [] )

        array = list(Utility.intArrayFromString( "{-1, 2}" ))

        self.assertSequenceEqual( list(array), [-1, 2] )

        array = list(Utility.intArrayFromString( "{-1r1, 2}" ))

        self.assertSequenceEqual( list(array), [-1, 2] )

        array = list(Utility.intArrayFromString( "{-1r3, 2}" ))

        self.assertSequenceEqual( list(array), [-1, -1, -1, 2] )

        array = list(Utility.intArrayFromString( "{-1, 2i, 2}" ))

        self.assertSequenceEqual( array, [-1, 0, 1, 2] )

        array = list(Utility.intArrayFromString( "{-1r2, 2i, 2r2}" ))

        self.assertSequenceEqual( array, [-1, -1, 0, 1, 2, 2] )

    def testDoubleArrayFromString(self):
        "*Test Utility.doubleArrayFromString method"
        array = list(Utility.doubleArrayFromString( "{}" ))

        self.assertSequenceEqual( list(array), [] )

        array = list(Utility.doubleArrayFromString( "{-1, 0.0, 1.0e0}" ))

        self.assertSequenceEqual( list(array), [-1.0, 0.0, 1.0] )

        array = list(Utility.doubleArrayFromString( "{-1, 3i, 1.0e+00}" ))

        self.assertSequenceEqual( list(array), [-1.0, -0.5, 0.0, 0.5, 1.0] )

        array = Utility.doubleArrayFromString( "{1e-3, 2l, 1.0}" )

        self.assertAlmostEqual( array[0], 1e-3, delta=1e-9 )
        self.assertAlmostEqual( array[1], 1e-2, delta=1e-9 )
        self.assertAlmostEqual( array[2], 1e-1, delta=1e-9 )
        self.assertAlmostEqual( array[3], 1.0, delta=1e-9 )

        array = Utility.doubleArrayFromString( "{1.0, 1l, 100, 3i, 200}" )

        self.assertAlmostEqual( array[0], 1.0, delta=1e-9 )
        self.assertAlmostEqual( array[1], 10.0, delta=1e-9 )
        self.assertAlmostEqual( array[2], 100.0, delta=1e-9 )
        self.assertAlmostEqual( array[3], 125.0, delta=1e-9 )
        self.assertAlmostEqual( array[4], 150.0, delta=1e-9 )
        self.assertAlmostEqual( array[5], 175.0, delta=1e-9 )
        self.assertAlmostEqual( array[6], 200.0, delta=1e-9 )

        array = Utility.doubleArrayFromString( "{0.0, pi/2, 3Pi / 4, PI, 2*pi}" )

        self.assertAlmostEqual( array[0], 0.0, delta=1e-9 )
        self.assertAlmostEqual( array[1], m.acos(-1.0)/2, delta=1e-9 )
        self.assertAlmostEqual( array[2], 3*m.acos(-1.0)/4, delta=1e-9 )
        self.assertAlmostEqual( array[3], m.acos(-1.0), delta=1e-9 )
        self.assertAlmostEqual( array[4], 2*m.acos(-1.0), delta=1e-9 )

        array = Utility.doubleArrayFromString( "{-pi, 3i, 0}" )

        self.assertAlmostEqual( array[0], -m.acos(-1.0), delta=1e-9 )
        self.assertAlmostEqual( array[1], -3*m.acos(-1.0)/4, delta=1e-9 )
        self.assertAlmostEqual( array[2], -m.acos(-1.0)/2, delta=1e-9 )
        self.assertAlmostEqual( array[3], -m.acos(-1.0)/4, delta=1e-9 )
        self.assertAlmostEqual( array[4], 0.0, delta=1e-9 )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the testSuite object
    suite = unittest.TestSuite()

    # Add the test cases to the testSuite
    suite.addTest(unittest.makeSuite(ArrayFromString))

    print >>sys.stderr, \
        "\n**************************************\n" + \
        "Testing Utility.ArrayFromString \n" + \
        "**************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

        # Delete the suite
    del suite

        # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.ArrayFromString.py
#-----------------------------------------------------------------------------#
