#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.Coordinate.CartesianCoordinate class unit tests
#  \file   tstUtility.Coordinate.CartesianCoordinate.py
#  \author Luke Kersting
#  \brief  Unit tests for the Utility.Coordinate.CartesianCoordinate classes
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy as nm

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')
Coordinate = importPyFrensieModuleFromBuildDir('Utility.Coordinate')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Translation Cartesian Spatial Coordinate Conversion Policy
class TranslationCartesianSpatialCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0] )

    def testConstructor(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy( [1.0, 2.0] )

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.CARTESIAN_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 0.0, 0.0, 0.0 )
        self.assertTrue( x_spatial_coord == 1.0 )
        self.assertTrue( y_spatial_coord == 2.0 )
        self.assertTrue( z_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 0.0, 0.0, 0.0 ) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.TranslationCartesianSpatialCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 0.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 1.0, 2.0, 3.0 ) )
        self.assertTrue( spatial_coords[0] == 0.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 0.0 )

#-----------------------------------------------------------------------------#
# Test the General Cartesian Spatial Coordinate Conversion Policy
class GeneralCartesianSpatialCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0], [2.0, 1.0, 2.0])

    def testConstructor(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy( [1.0, 2.0], [2.0, 1.0, 2.0] )
        with self.assertRaises(TypeError):
            Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy( [1.0, 2.0, 3.0], [2.0, 1.0] )

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.CARTESIAN_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 0.0, 0.0, 0.0 )
        self.assertTrue( x_spatial_coord == 1.0 )
        self.assertTrue( y_spatial_coord == 2.0 )
        self.assertTrue( z_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 0.0, 0.0, 0.0 ) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.GeneralCartesianSpatialCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 0.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 1.0, 2.0, 3.0 ) )
        self.assertTrue( spatial_coords[0] == 0.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 0.0 )

#-----------------------------------------------------------------------------#
# Test the Rotation Cartesian Coordinate Conversion Policy
class RotationCartesianCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.RotationCartesianCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.RotationCartesianCoordinateConversionPolicy([1.0, 1.0, 1.0])

    def testConstructor(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.RotationCartesianCoordinateConversionPolicy) )
        with self.assertRaises(TypeError):
            Coordinate.RotationCartesianCoordinateConversionPolicy( [1.0, 2.0] )

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.CARTESIAN_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 0.0, 0.0, 2.0 )
        self.assertAlmostEqual( x_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( y_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( z_spatial_coord, 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( ( 0.0, 0.0, 2.0 ) )
        self.assertAlmostEqual( spatial_coords[0], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( spatial_coords[1], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )
        self.assertAlmostEqual( spatial_coords[2], 2.0/nm.sqrt(3.0), delta=1e-15*2.0/nm.sqrt(3.0) )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 2.0/nm.sqrt(6.0), 2.0/nm.sqrt(6.0), -nm.sqrt(8.0/3.0) )
        self.assertAlmostEqual( primary_spatial_coord, 2.0, delta=1e-15*2.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( ( 2.0/nm.sqrt(6.0), 2.0/nm.sqrt(6.0), -nm.sqrt(8.0/3.0) ) )
        self.assertAlmostEqual( spatial_coords[0], 2.0, delta=1e-15*2.0 )
        self.assertTrue( spatial_coords[1] == 0.0 )
        self.assertTrue( spatial_coords[2] == 0.0 )

    def testGetLocalDirectionalCoordinateSystemType(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy getLocalDirectionalCoordinateSystemType"
        self.assertTrue( self.policy.getLocalDirectionalCoordinateSystemType() == Coordinate.CARTESIAN_DIRECTIONAL_COORDINATE_SYSTEM )

    def testIsPrimaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isPrimaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isPrimaryDirectionalCoordinateValid( 1.0 ) )

    def testIsSecondaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isSecondaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isSecondaryDirectionalCoordinateValid( 1.0 ) )

    def testIsTertiaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy isTertiaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isTertiaryDirectionalCoordinateValid( 1.0 ) )

    def testNormalizeLocalDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy normalizeLocalDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeLocalDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testNormalizeCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy normalizeCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeCartesianDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testConvertToCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy convertToCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianDirectionalCoordinates( 0.0, 0.0, 1.0 )
        self.assertTrue( x_spatial_coord == 1.0/nm.sqrt(3.0) )
        self.assertTrue( y_spatial_coord == 1.0/nm.sqrt(3.0) )
        self.assertTrue( z_spatial_coord == 1.0/nm.sqrt(3.0) )


    def testConvertFromCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.RotationCartesianCoordinateConversionPolicy convertFromCartesianDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianDirectionalCoordinates( 1.0/nm.sqrt(6.0), 1.0/nm.sqrt(6.0), -nm.sqrt(2.0/3.0) )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 0.0 )

#-----------------------------------------------------------------------------#
# Test the Basic Cartesian Coordinate Conversion Policy
class BasicCartesianCoordinateConversionPolicyTestCase(unittest.TestCase):
    "TestCase class for Utility.Coordinate.BasicCartesianCoordinateConversionPolicy class"

    def setUp(self):
        self.policy= Coordinate.BasicCartesianCoordinateConversionPolicy()

    def testConstructor(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy constructor"
        self.assertTrue(isinstance(self.policy, Coordinate.BasicCartesianCoordinateConversionPolicy) )

    def testGetLocalSpatialCoordinateSystemType(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy getLocalSpatialCoordinateSystemType"
        self.assertTrue( self.policy.getLocalSpatialCoordinateSystemType() == Coordinate.CARTESIAN_SPATIAL_COORDINATE_SYSTEM )

    def testIsPrimarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isPrimarySpatialCoordinateValid"
        self.assertTrue( self.policy.isPrimarySpatialCoordinateValid( 1.0 ) )

    def testIsSecondarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isSecondarySpatialCoordinateValid"
        self.assertTrue( self.policy.isSecondarySpatialCoordinateValid( 1.0 ) )

    def testIsTertiarySpatialCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isTertiarySpatialCoordinateValid"
        self.assertTrue( self.policy.isTertiarySpatialCoordinateValid( 1.0 ) )

    def testConvertToCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy convertToCartesianSpatialCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( x_spatial_coord == 1.0 )
        self.assertTrue( y_spatial_coord == 2.0 )
        self.assertTrue( z_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertToCartesianSpatialCoordinates( (1.0, 2.0, 3.0) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testConvertFromCartesianSpatialCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy convertFromCartesianSpatialCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianSpatialCoordinates( 1.0, 2.0, 3.0 )
        self.assertTrue( primary_spatial_coord == 1.0 )
        self.assertTrue( secondary_spatial_coord == 2.0 )
        self.assertTrue( tertiary_spatial_coord == 3.0 )

        spatial_coords = self.policy.convertFromCartesianSpatialCoordinates( (1.0, 2.0, 3.0) )
        self.assertTrue( spatial_coords[0] == 1.0 )
        self.assertTrue( spatial_coords[1] == 2.0 )
        self.assertTrue( spatial_coords[2] == 3.0 )

    def testGetLocalDirectionalCoordinateSystemType(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy getLocalDirectionalCoordinateSystemType"
        self.assertTrue( self.policy.getLocalDirectionalCoordinateSystemType() == Coordinate.CARTESIAN_DIRECTIONAL_COORDINATE_SYSTEM )

    def testIsPrimaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isPrimaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isPrimaryDirectionalCoordinateValid( 1.0 ) )

    def testIsSecondaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isSecondaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isSecondaryDirectionalCoordinateValid( 1.0 ) )

    def testIsTertiaryDirectionalCoordinateValid(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy isTertiaryDirectionalCoordinateValid"
        self.assertTrue( self.policy.isTertiaryDirectionalCoordinateValid( 1.0 ) )

    def testNormalizeLocalDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy normalizeLocalDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeLocalDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testNormalizeCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy normalizeCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.normalizeCartesianDirectionalCoordinates( 1.0, 2.0, 2.0 )
        self.assertTrue( x_spatial_coord == 1.0/3.0 )
        self.assertTrue( y_spatial_coord == 2.0/3.0 )
        self.assertTrue( z_spatial_coord == 2.0/3.0 )

    def testConvertToCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy convertToCartesianDirectionalCoordinates"
        x_spatial_coord, y_spatial_coord, z_spatial_coord = self.policy.convertToCartesianDirectionalCoordinates( 0.0, 0.0, 1.0 )
        self.assertTrue( x_spatial_coord == 0.0 )
        self.assertTrue( y_spatial_coord == 0.0 )
        self.assertTrue( z_spatial_coord == 1.0 )

    def testConvertFromCartesianDirectionalCoordinates(self):
        "*Test Utility.Coordinate.BasicCartesianCoordinateConversionPolicy convertFromCartesianDirectionalCoordinates"
        primary_spatial_coord, secondary_spatial_coord, tertiary_spatial_coord = self.policy.convertFromCartesianDirectionalCoordinates( 0.0, 0.0, 1.0 )
        self.assertTrue( primary_spatial_coord == 0.0 )
        self.assertTrue( secondary_spatial_coord == 0.0 )
        self.assertTrue( tertiary_spatial_coord == 1.0 )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(TranslationCartesianSpatialCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(GeneralCartesianSpatialCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(RotationCartesianCoordinateConversionPolicyTestCase))
    suite.addTest(unittest.makeSuite(BasicCartesianCoordinateConversionPolicyTestCase))


    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Utility.Coordinate \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.Coordinate.CartesianCoordinate.py
#-----------------------------------------------------------------------------#
