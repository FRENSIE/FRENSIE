# Create the PyFrensie_ALL string
SET(PyFrensie_ALL "__all__ = [")
FOREACH(PACKAGE ${PyFrensie_PACKAGES})
  SET(PyFrensie_ALL "${PyFrensie_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(PyFrensie_ALL "${PyFrensie_ALL}]")

# Create the UTILITY_MODULE_ALL string
SET(UTILITY_MODULE_ALL "__all__ = [")
FOREACH(PACKAGE ${UTILITY_PACKAGES})
  SET(UTILITY_MODULE_ALL "${UTILITY_MODULE_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(UTILITY_MODULE_ALL "${UTILITY_MODULE_ALL}]")

# Create the UTILITY_MODULE_INIT string
IF(NOT "${UTILITY_MODULE_INIT_PACKAGE}" STREQUAL "")
  SET(UTILITY_MODULE_INIT "from ${UTILITY_MODULE_INIT_PACKAGE} import *")
ELSE()
  SET(UTILITY_MODULE_INIT "")
ENDIF()

# Create the DATA_MODULE_ALL string
SET(DATA_MODULE_ALL "__all__ = [")
FOREACH(PACKAGE ${DATA_PACKAGES})
  SET(DATA_MODULE_ALL "${DATA_MODULE_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(DATA_MODULE_ALL "${DATA_MODULE_ALL}]")

# Create the DATA_MODULE_INIT string
IF(NOT "${DATA_MODULE_INIT_PACKAGE}" STREQUAL "")
  SET(DATA_MODULE_INIT "from ${DATA_MODULE_INIT_PACKAGE} import *")
ELSE()
  SET(DATA_MODULE_INIT "")
ENDIF()

# Create the DATA_GEN_MODULE_ALL string
SET(DATA_GEN_MODULE_ALL "__all__ = [")
FOREACH(PACKAGE ${DATA_GEN_PACKAGES})
  SET(DATA_GEN_MODULE_ALL "${DATA_GEN_MODULE_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(DATA_GEN_MODULE_ALL "${DATA_GEN_MODULE_ALL}]")

# Create the DATA_GEN_MODULE_INIT string
IF(NOT "${DATA_GEN_MODULE_INIT_PACKAGE}" STREQUAL "")
  SET(DATA_GEN_MODULE_INIT "from ${DATA_GEN_MODULE_INIT_PACKAGE} import *")
ELSE()
  SET(DATA_GEN_MODULE_INIT "")
ENDIF()

# Create the GEOMETRY_MODULE_ALL string
SET(GEOMETRY_MODULE_ALL "__all__ = [")
FOREACH(PACKAGE ${GEOMETRY_PACKAGES})
  SET(GEOMETRY_MODULE_ALL "${GEOMETRY_MODULE_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(GEOMETRY_MODULE_ALL "${GEOMETRY_MODULE_ALL}]")

# Create the GEOMETRY_MODULE_INIT string
IF(NOT "${GEOMETRY_MODULE_INIT_PACKAGE}" STREQUAL "")
  SET(GEOMETRY_MODULE_INIT "from ${GEOMETRY_MODULE_INIT_PACKAGE} import *")
ELSE()
  SET(GEOMETRY_MODULE_INIT "")
ENDIF()

# Create the MONTE_CARLO_MODULE_ALL string
SET(MONTE_CARLO_MODULE_ALL "__all__ = [")
FOREACH(PACKAGE ${MONTE_CARLO_PACKAGES})
  SET(MONTE_CARLO_MODULE_ALL "${MONTE_CARLO_MODULE_ALL}'${PACKAGE}',\n          ")
ENDFOREACH()
SET(MONTE_CARLO_MODULE_ALL "${MONTE_CARLO_MODULE_ALL}]")

# Create the MONTE_CARLO_MODULE_INIT string
IF(NOT "${MONTE_CARLO_MODULE_INIT_PACKAGE}" STREQUAL "")
  SET(MONTE_CARLO_MODULE_INIT "from ${MONTE_CARLO_MODULE_INIT_PACKAGE} import *")
ELSE()
  SET(MONTE_CARLO_MODULE_INIT "")
ENDIF()

# Add a new target
ADD_CUSTOM_TARGET(Local_Python_Modules ALL)

# Create the top python modules
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/__init__.py.in
  ${CMAKE_CURRENT_BINARY_DIR}/__init__.py)
ADD_CUSTOM_COMMAND(TARGET Local_Python_Modules
  COMMAND ${PYTHON_EXECUTABLE} -c "import py_compile; py_compile.compile('__init__.py')"
  COMMENT "Byte compiling __init__.py"
  VERBATIM)
INSTALL(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/__init__.py
  ${CMAKE_CURRENT_BINARY_DIR}/__init__.pyc
  DESTINATION ${PyFrensie_INSTALL_DIR})

# Define the local python modules
SET(LOCAL_MODULES Utility Geometry Data MonteCarlo DataGen)

# Create the local python modules
FOREACH(MODULE ${LOCAL_MODULES})

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}/__init__.py.in
    ${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/__init__.py)
  ADD_CUSTOM_COMMAND(TARGET Local_Python_Modules
    COMMAND ${PYTHON_EXECUTABLE} -c "import py_compile; py_compile.compile('${MODULE}/__init__.py')"
    COMMENT "Byte compiling ${MODULE}/__init__.py"
    VERBATIM)
  INSTALL(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/__init__.py
    ${CMAKE_CURRENT_BINARY_DIR}/${MODULE}/__init__.pyc
    DESTINATION ${PyFrensie_INSTALL_DIR}/${MODULE})

ENDFOREACH()
